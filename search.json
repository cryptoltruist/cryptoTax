[{"path":"https://cryptoltruist.github.io/cryptoTax/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Steve Wong Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/TODOS.html","id":"performance-improvements","dir":"","previous_headings":"","what":"Performance improvements","title":"TODOS","text":"calculate superficial losses rows sales loss instead every row. Replace -loops dplyr (e.g., ACB) Think using data.table dtplyr","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/TODOS.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"TODOS","text":"Finish Shiny app: editable table, see https://www.r-bloggers.com/2019/04/edit-datatables--r-shiny-app/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/TODOS.html","id":"code-optimization","dir":"","previous_headings":"","what":"Code optimization","title":"TODOS","text":"Use format_generic much possible every format_* function, whenever possible, reduce code redundancy. Fix duplicated columns sup loss calculations Check https://github.com/BittyTax/BittyTax general inspiration","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"basic-acb","dir":"Articles","previous_headings":"","what":"Basic ACB","title":"Adjusted Cost Base","text":"begin, replicate basic ACB example showcased https://www.adjustedcostbase.ca/blog/--calculate-adjusted-cost-base-acb--capital-gains/  first generate data: Next, generate calculations achieve following result:","code":"library(cryptoTax) data <- data_adjustedcostbase1 data ACB(data, spot.rate = \"price\", sup.loss = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"superficial-losses","dir":"Articles","previous_headings":"","what":"Superficial losses","title":"Adjusted Cost Base","text":"now replicate advanced superficial loss example showcased https://www.adjustedcostbase.ca/blog/---superficial-loss-rule/.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"example-1","dir":"Articles","previous_headings":"Superficial losses","what":"Example 1","title":"Adjusted Cost Base","text":"first demonstrate “Violation Superficial Loss Rule” using regular ACB without accounting superficial losses:  Next, correct way, accounting superficial losses:  Per default, setting sup.loss = TRUE (default) generates lot columns provide much information possible. make look short adjustedcostbase.ca example, can subselect relevant columns:","code":"data <- data_adjustedcostbase2 ACB(data, spot.rate = \"price\", sup.loss = FALSE) library(dplyr) ACB(data, spot.rate = \"price\") %>%   select(date, transaction, quantity, price, total.quantity, ACB, ACB.share, gains)"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"example-2","dir":"Articles","previous_headings":"Superficial losses","what":"Example 2","title":"Adjusted Cost Base","text":"continue second superficial loss example. first demonstrate “Violation Superficial Loss Rule” using regular ACB without accounting superficial losses:  Next, correct way, accounting superficial losses:","code":"data <- data_adjustedcostbase3 ACB(data, spot.rate = \"price\", sup.loss = FALSE) ACB(data, spot.rate = \"price\") %>%   select(date, transaction, quantity, price, total.quantity, ACB, ACB.share, gains)"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"example-3","dir":"Articles","previous_headings":"Superficial losses","what":"Example 3","title":"Adjusted Cost Base","text":"continue third superficial loss example (first example https://www.adjustedcostbase.ca/blog/applying--superficial-loss-rule---partial-disposition--shares/). first demonstrate “Violation Superficial Loss Rule” using regular ACB without accounting superficial losses:","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"when-shares-are-sold-at-a-loss-and-then-partially-reacquired-within-the-superficial-loss-period","dir":"Articles","previous_headings":"Superficial losses > Example 3","what":"When Shares are Sold at a Loss and then Partially Reacquired within the Superficial Loss Period","title":"Adjusted Cost Base","text":"Next, correct way, accounting superficial losses:","code":"data <- data_adjustedcostbase4 ACB(data, spot.rate = \"price\", sup.loss = FALSE) ACB(data, spot.rate = \"price\") %>%   select(date, transaction, quantity, price, total.quantity, ACB, ACB.share, gains)"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"example-4","dir":"Articles","previous_headings":"Superficial losses","what":"Example 4","title":"Adjusted Cost Base","text":"continue fourth superficial loss example (second example https://www.adjustedcostbase.ca/blog/applying--superficial-loss-rule---partial-disposition--shares/). first demonstrate “Violation Superficial Loss Rule” using regular ACB without accounting superficial losses:","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"when-shares-are-purchased-and-then-partially-sold-within-the-superficial-loss-period","dir":"Articles","previous_headings":"Superficial losses > Example 4","what":"When Shares are Purchased and then Partially Sold within the Superficial Loss Period","title":"Adjusted Cost Base","text":"Next, correct way, accounting superficial losses:","code":"data <- data_adjustedcostbase5 ACB(data, spot.rate = \"price\", sup.loss = FALSE) ACB(data, spot.rate = \"price\") %>%   select(date, transaction, quantity, price, total.quantity, ACB, ACB.share, gains)"},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"when-multiple-acquisitions-andor-multiple-dispositions-occur-within-the-superficial-loss-period","dir":"Articles","previous_headings":"Superficial losses > Example 5","what":"When Multiple Acquisitions and/or Multiple Dispositions Occur Within the Superficial Loss Period","title":"Adjusted Cost Base","text":"examples given one, make . adjustedcostbase.ca writes web-based application support claiming partial losses automatically: Note AdjustedCostBase.ca automatically apply superficial loss rule . Although ’ll see superficial loss rule warnings displayed many cases, ’s edit transaction apply superficial loss rule. Also, cases ’re partially claiming loss due superficial loss rule, ’ll need manually calculate partial capital loss using methods described . Fortunately, cryptoTax allows claiming partial losses automatically. first demonstrate “Violation Superficial Loss Rule” using regular ACB without accounting superficial losses: Next, correct way, accounting superficial losses, include columns demonstration:","code":"data <- data_adjustedcostbase6 ACB(data, spot.rate = \"price\", sup.loss = FALSE) ACB(data, spot.rate = \"price\") %>%   select(     date, transaction, quantity, price, total.quantity,     suploss.range, sup.loss, sup.loss.quantity, ACB, ACB.share,     gains.uncorrected, gains.sup, gains.excess, gains   )"},{"path":[]},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"example-1-1","dir":"Articles","previous_headings":"Other examples from the internet > CryptoTaxCalculator","what":"Example 1","title":"Adjusted Cost Base","text":"example CryptoTaxCalculator, showcased : https://cryptotaxcalculator.io/guides/crypto-tax-canada-cra/. first demonstrate “Violation Superficial Loss Rule” using regular ACB without accounting superficial losses:  Next, correct way, accounting superficial losses:","code":"data <- data_cryptotaxcalculator1 ACB(data, transaction = \"trade\", spot.rate = \"price\", sup.loss = FALSE) ACB(data, transaction = \"trade\", spot.rate = \"price\") %>%   select(date, trade, price, quantity, total.quantity, ACB, ACB.share, gains)"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"example-2-1","dir":"Articles","previous_headings":"Other examples from the internet > CryptoTaxCalculator","what":"Example 2","title":"Adjusted Cost Base","text":"continue second superficial loss example. first demonstrate “Violation Superficial Loss Rule” using regular ACB without accounting superficial losses:  Next, correct way, accounting superficial losses:","code":"data <- data_cryptotaxcalculator2 ACB(data, transaction = \"trade\", spot.rate = \"price\", sup.loss = FALSE) ACB(data, transaction = \"trade\", spot.rate = \"price\") %>%   select(date, trade, price, quantity, total.quantity, ACB, ACB.share, gains)"},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"example-1-2","dir":"Articles","previous_headings":"Other examples from the internet > Coinpanda","what":"Example 1","title":"Adjusted Cost Base","text":"example Coinpanda, showcased : https://coinpanda.io/blog/crypto-taxes-canada-adjusted-cost-base/. first example require superficial loss rule can set FALSE without worry.","code":"data <- data_coinpanda1 ACB(data,   transaction = \"type\", quantity = \"amount\",   total.price = \"price\", sup.loss = FALSE )"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"example-2-2","dir":"Articles","previous_headings":"Other examples from the internet > Coinpanda","what":"Example 2","title":"Adjusted Cost Base","text":"continue second superficial loss example. first demonstrate “Violation Superficial Loss Rule” using regular ACB without accounting superficial losses:  Next, correct way, accounting superficial losses:","code":"data <- data_coinpanda2 ACB(data,   transaction = \"type\", quantity = \"amount\",   total.price = \"price\", sup.loss = FALSE ) ACB(data, transaction = \"type\", quantity = \"amount\", total.price = \"price\") %>%   select(type, date, amount, price, fees, ACB, ACB.share, gains)"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/ACB.html","id":"koinly","dir":"Articles","previous_headings":"Other examples from the internet","what":"Koinly","title":"Adjusted Cost Base","text":"example Koinly, showcased : https://koinly.io/blog/calculating-crypto-taxes-canada/. first demonstrate “Violation Superficial Loss Rule” using regular ACB without accounting superficial losses:  Next, correct way, accounting superficial losses:","code":"data <- data_koinly ACB(data, sup.loss = FALSE) ACB(data) %>%   select(date, transaction, quantity, spot.rate, total.quantity, ACB, ACB.share, gains)"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"trades-transaction-fees","dir":"Articles","previous_headings":"","what":"Trades & transaction fees","title":"Tax treatments and decisions","text":"(https://www.adjustedcostbase.ca/blog/--calculate-adjusted-cost-base-acb--capital-gains/) documentation needs integrated either side, makes sense integrate buy side. coin--coin trades, price purchased coin fetched coinmarketcap, reused price sold coin (available exchange ). way, price purchase sale match (using different spot rates two coins prevent prices matching).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"trading-fees-paid-in-third-currency","dir":"Articles","previous_headings":"Trades & transaction fees","what":"Trading fees paid in third currency","title":"Tax treatments and decisions","text":"Paying trading fees third currency (e.g., BNB CRO) considered sale fair market value coin quantity. fair market value also gets added ACB original trade.","code":""},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"cointracking","dir":"Articles","previous_headings":"Trades & transaction fees","what":"CoinTracking","title":"Tax treatments and decisions","text":"fee paid third currency (.e. coin part either sell buy) deducted total balance. common example BNB Binance. order correct third coin balance portfolio, need create additional transaction FEE fee. (https://cointracking.freshdesk.com/en/support/solutions/articles/29000007202-entering-fees)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"person-on-reddit","dir":"Articles","previous_headings":"Trades & transaction fees","what":"Person on reddit","title":"Tax treatments and decisions","text":"using CRO BNB pay fees, triggered disposition give rise capital gain loss. market value fee proceeds disposition CRO/BNB, also gets added ACB whatever coin bought. (https://www.reddit.com/r/BitcoinCA/comments/rmjz3e/is_it_a_tax_event_to_pay_trading_fees_with)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"fair-market-value","dir":"Articles","previous_headings":"","what":"Fair market value","title":"Tax treatments and decisions","text":"spot rate available exchange, scraped coinmarketcap (crypto2 package) average open close (rather high low). converting USD CAD, rate obtained priceR package (e.g., European Central Bank Statistical Data Warehouse).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"superficial-losses","dir":"Articles","previous_headings":"","what":"Superficial losses","title":"Tax treatments and decisions","text":"Superficial losses (+/- 30 days purchase) deducted total capital losses (including gas fees). New coins obtained airdrops like, form interest staking, treated buying context superficial loss. superficial loss quantity greater amount bought within 60 days, amount left end 60 days, amount bought/left counted superficial; excess counted valid capital loss. sale bring total quantity share/coin zero rebought within 30 days, full loss considered valid superficial.","code":""},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"taxtips-ca","dir":"Articles","previous_headings":"Superficial losses","what":"Taxtips.ca","title":"Tax treatments and decisions","text":"superficial loss added adjusted cost base (ACB) repurchased substitute shares. repurchased substitute shares sold, loss can claimed. (https://www.taxtips.ca/personaltax/investing/taxtreatment/superficial-losses---disallowed-losses.htm) capital losses exceed capital gains current year, can (don’t ) carry back losses 3 preceding taxation years deducted capital gains years. Capital losses can also carried forward indefinitely. shares bought, fully sold immediately ? Can capital loss claimed case? long shares sold, don’t repurchase shares within 30-day period following sale’s settlement date, can claim capital loss. Remember two conditions must apply superficial loss rule: shares must bought within 61-day period, , shares must still owned end period. case shares sold (nothing’s repurchased) superficial loss rule apply long don’t shares end 61-day period. (https://www.taxtips.ca/filing/capital-losses.htm)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"adjustedcostbase-ca","dir":"Articles","previous_headings":"Superficial losses","what":"adjustedcostbase.ca","title":"Tax treatments and decisions","text":"Avoid Headaches Deferring Entire Capital Loss Simplicity conditions partially applying superficial loss rule partial dispositions provide advantage Canadian investors. Instead using strict interpretation superficial loss rule kinds cases denies losses full, CRA allows investors partially claim loss. ’re obligated partially claim loss; can opt entire loss denied (carried forward cases). loss relatively small may worth headache performing calculations determine partially allowable loss. remember superficially loss rule denies capital loss, amount capital loss can usually added ACB reacquired shares, loss effectively carried forward opposed permanently denied. (https://www.adjustedcostbase.ca/blog/applying--superficial-loss-rule---partial-disposition--shares/)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"superficial-gains","dir":"Articles","previous_headings":"","what":"Superficial gains","title":"Tax treatments and decisions","text":"thing superficial gains.","code":""},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"adjustedcostbase-ca-1","dir":"Articles","previous_headings":"Superficial gains","what":"adjustedcostbase.ca","title":"Tax treatments and decisions","text":"Since superficial loss rule denies capital losses certain circumstances, might ask, can capital gains avoided certain cases? example, sell shares realize capital gain, immediately repurchase shares, can call “superficial gain” defer capital gain? answer : defer capital gain thing “superficial gain.” capital gain taxable immediately current tax year, even shares repurchased within 30 days. (https://www.adjustedcostbase.ca/blog/---superficial-loss-rule/)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"gasnetwork-fees","dir":"Articles","previous_headings":"","what":"Gas/network fees","title":"Tax treatments and decisions","text":"adopt conservative approach treat network fees disposition fair market value coins time transaction (triggers capital gain/loss tax event).","code":""},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"cointracking-1","dir":"Articles","previous_headings":"Gas/network fees","what":"CoinTracking","title":"Tax treatments and decisions","text":"Every transaction coin, buy, donation, spend fee taxable impact coin increase decrease value holding period buy time loose ownership coin. (https://cointracking.freshdesk.com/en/support/solutions/articles/29000007202-entering-fees)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"koinly","dir":"Articles","previous_headings":"Gas/network fees","what":"Koinly","title":"Tax treatments and decisions","text":"exchanges charge transfer fee move crypto. pay transfer fee CAD another fiat currency - tax free. time, ’ll pay transfer fees crypto. Spending crypto disposition, ’s taxable event subject Capital Gains Tax. means price asset increased since bought , spend crypto transfer - ’ll capital gain. CRA doesn’t guidance whether transfer fees allowable cost - don’t know can add cost basis adjusted cost basis rules. ’s unlikely transfer fees tax deductible. Therefore fees taken account gain calculation. value increase taxable benefit (e.g. need less amount coin pay fee). (https://koinly.io/guides/crypto-tax-canada) Sometimes transfer assets wallets, ’ll pay gas fee. However, Capital Gains Tax guidance countries quite clear can add fees associated acquiring disposing asset cost basis. ’re make transfer. isn’t clear guidance yet tax office. can choose take conservative aggressive approach crypto taxes. conservative approach treat taxable event. ’re spending ETH - like good service - ’s subject Capital Gains Tax. measured approach claim spent, recognize capital gain loss transaction. Finally, aggressive approach add cost basis. recommend conservative approach transfer fees approaches may stand scrutiny tax authorities. (https://koinly.io/blog/--gas-fees-----taxed)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"tokentax","dir":"Articles","previous_headings":"Gas/network fees","what":"TokenTax","title":"Tax treatments and decisions","text":"multiple ways approach tax treatment fees, ranging conservative aggressive. Please note recommend conservative approach. Conservative: Treat ETH fees spent instance taxable sales, spent ETH good service. Medium: Claim Ethereum spent fees removed holdings, don’t recognize capital gain loss. Aggressive: Claim ETH sale 0 USD, claiming capital loss ETH spent. also potentially add ETH transfer fees cost basis. However, IRS argue transfers necessary subsequent ETH sale take place, thus contentious tax standpoint. (https://tokentax.co/blog/-ethereum-gas-fees-tax-deductible)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"cointracker","dir":"Articles","previous_headings":"Gas/network fees","what":"CoinTracker","title":"Tax treatments and decisions","text":"Gas fees transfers can added back basis token. (https://www.cointracker.io/blog/--claim-tax-benefits---cryptocurrency-gas-fees/)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"metricscpa-cpa-from-reddit","dir":"Articles","previous_headings":"Gas/network fees","what":"MetricsCPA (CPA from Reddit)","title":"Tax treatments and decisions","text":"Q: also add transfer fees cost basis ? e.g. transferring coin exchange wallet. : Yes, reasonable include , part costs. (https://www.reddit.com/r/BitcoinCA/comments/jwmn6h/comment/gcsn76a/?utm_source=share&utm_medium=web2x&context=3)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"foreign-income","dir":"Articles","previous_headings":"","what":"Foreign income","title":"Tax treatments and decisions","text":", revenue crypto considered foreign income, localized global ledger (blockchain), technically Canada. reason, one’s total acquisition cost greater $100,000 point tax year, one needs fill form T1135.","code":""},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"taxtips-ca-1","dir":"Articles","previous_headings":"Foreign income","what":"Taxtips.ca","title":"Tax treatments and decisions","text":"probably wise report cryptocurrency T1135, puts $100,000, according article Jamie Golombek, CPA, CA, CFP, CLU, TEP. considered intangible property located outside Canada. doesn’t cost anything report , save expensive penalties incurred reported later deemed CRA reportable. (https://www.taxtips.ca/filing/foreign-asset-reporting.htm)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"intuit","dir":"Articles","previous_headings":"Foreign income","what":"Intuit","title":"Tax treatments and decisions","text":"CRA views bitcoin “specified foreign property” Section 233.3 Income Tax Act. (https://quickbooks.intuit.com/ca/resources/taxes/--claim-cryptocurrency---income-tax--canada/)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"taxable-income","dir":"Articles","previous_headings":"","what":"Taxable income","title":"Tax treatments and decisions","text":", revenue interest staking (well mining) considered taxable income similar nature revenue investment interest (like bank). Airdrops, rewards, referrals, promos, considered purchase 0$ ACB (including Shakepay, Brave, Presearch). Similarly credit card cashback, discounts considered purchase FMV (fair market value) time reception, income trigger tax event. includes certain services Crypto.com: Prepaid card cashback (including Spotify, Netflix, Amazon Prime “reimbursements”) topping-phones internet purchases gift card purchases (rewards transferring CRO friend considered rebate, still taxable income like rewards) Exchange discount/rewards trading staking CRO exchange (Binance, etc.)","code":""},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"yahoo-finance","dir":"Articles","previous_headings":"Taxable income","what":"Yahoo Finance","title":"Tax treatments and decisions","text":"majority Canadian consumers don’t pay taxes credit card rewards. long ’re earning points, miles, cash back personal purchases (.e., business purchases), CRA look discounts coupons, income. Much like don’t report savings grocery coupons, won’t report credit card rewards tax filing. (https://ca.style.yahoo.com/credit-card-rewards-taxable-183034394.html)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"cra","dir":"Articles","previous_headings":"Taxable income","what":"CRA","title":"Tax treatments and decisions","text":"business income capital gain? income tax treatment cryptocurrency […] different depending whether […] activities personal activity (hobby) business activity. […] hobby pursued sufficiently commercial businesslike way, can considered business activity taxed . (https://www.canada.ca/en/revenue-agency/programs/-canada-revenue-agency-cra/compliance/digital-currency/cryptocurrency-guide.html)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"koinly-1","dir":"Articles","previous_headings":"Taxable income","what":"Koinly","title":"Tax treatments and decisions","text":"countries like Canada Germany see receiving airdrop tax free event, exception rather rule…. Canada Revenue Agency doesn’t view airdrops type income. (https://koinly.io/blog/crypto-airdrop-tax)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"cointracker-1","dir":"Articles","previous_headings":"Taxable income","what":"CoinTracker","title":"Tax treatments and decisions","text":"airdrops hard forks, unlike US guidance unclear, Canada cost basis zero coins. Therefore coins disposed entire proceeds considered capital gains (individuals) income (businesses). https://support.cointracker.io/hc/en-us/articles/4413071347857","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"coinpanda","dir":"Articles","previous_headings":"Taxable income","what":"CoinPanda","title":"Tax treatments and decisions","text":"cases, business activity needs involve repetitive actions time. … mining just personal hobby, pay capital gains tax later sell (dispose ) received coins. didn’t pay anything coins originally, cost basis considered zero capital gains equal market value (CAD) time sell coins future. … Canadian Revenue Agency released specific guidance staking cryptocurrency. staking similar nature mining cryptocurrencies, safest approach treat received coins staking similar fashion mining. … CRA issued specific guidance tax treatment cryptocurrency airdrops, safe approach pay capital gains tax later decide sell coins. Similar crypto received mining, assume cost basis equal zero pay anything acquire coins. (https://coinpanda.io/guides/crypto-taxes-canada/)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"metricscpa-cpa-from-reddit-1","dir":"Articles","previous_headings":"Taxable income","what":"MetricsCPA (CPA from Reddit)","title":"Tax treatments and decisions","text":"Q: treat Shakepay sats? : case, cost basis 0. Shaking phone constitute earning income. say sell $10, $10 added income $5 (cap gains 50%) taxed. sale $10 cost basis 0. (https://www.reddit.com/r/BitcoinCA/comments/jwmn6h/comment/gi3fe3l/?utm_source=share&utm_medium=web2x&context=3)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"tsbcpa-cpa-from-reddit","dir":"Articles","previous_headings":"Taxable income","what":"TSBCPA (CPA from Reddit)","title":"Tax treatments and decisions","text":"love able shed light topic, however, factors play make difficult . Currently, areas received specific CRA guidance refrain providing general guidance matters. reasoning can risks involved depending aggressive conservative reporting crypto received. Treating income received usually conservative bet; adding cost base $0 can aggressive. ton different/varying information individuals accountants. […] general, want remain conservative (may always best approach), treating things income received achieve . staking rewards - generally always recommend treating income received. (https://www.reddit.com/r/BitcoinCA/comments/tvg6gc/accountants_of_reddit_please_help_clarify)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"interest-expense-on-money-borrowed-to-purchase-investments","dir":"Articles","previous_headings":"","what":"Interest expense on money borrowed to purchase investments","title":"Tax treatments and decisions","text":"Generally, interest expense money borrowed purchase investments purpose gaining producing income tax-deductible.","code":""},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"taxtips-ca-2","dir":"Articles","previous_headings":"Interest expense on money borrowed to purchase investments","what":"Taxtips.ca","title":"Tax treatments and decisions","text":"Interest deductible carrying charges claimed deduction income line 22100 (line 221) personal income tax return, completion Schedule 4 (federal). (https://www.taxtips.ca/personaltax/investing/interest-expense--money-borrowed--purchase-investments.htm)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/references.html","id":"cra-1","dir":"Articles","previous_headings":"Interest expense on money borrowed to purchase investments","what":"CRA","title":"Tax treatments and decisions","text":"flexible approach tracing/linking borrowed money eligible uses applied repayment borrowed money single borrowing account (line credit, mortgage loan) used eligible ineligible purposes. CRA’s view, repayment principal portion borrowing reduce portions line credit, mortgage loan used eligible ineligible purposes. individual allocate repayment specifically ineligible portion borrowing. Instead, applying original eligible use percentage balance, interest $32,000 borrowed money (40% $80,000) deductible. (https://www.canada.ca/en/revenue-agency/services/tax/technical-information/income-tax/income-tax-folios-index/series-3-property-investments-savings-plans/series-3-property-investments-savings-plan-folio-6-interest/income-tax-folio-s3-f6-c1-interest-deductibility.html)  \\(~\\) \\(~\\) \\(~\\) \\(~\\) \\(~\\) \\(~\\)","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"preparing-your-list-of-coins","dir":"Articles","previous_headings":"","what":"Preparing your list of coins","title":"Generate a Full Tax Report","text":"First, want fetch price information coins. Note: exchanges don’t require fetching information coinmarketcap already give CAD value trades revenues. However, still necessary get current value, therefore unrealized gains losses.","code":"library(cryptoTax)  my.coins <- c(\"BTC\", \"ETH\", \"ADA\", \"CRO\", \"LTC\", \"USDC\", \"BUSD\", \"CEL\", \"PRE\", \"ETHW\", \"BAT\") list.prices <- prepare_list_prices(coins = my.coins, start.date = \"2021-01-01\")"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"formatting-your-data","dir":"Articles","previous_headings":"","what":"Formatting your data","title":"Generate a Full Tax Report","text":"use shortcut vignette format exchanges quickly lapply() format_detect() function. However, can use dedicated functions wish .","code":"exchanges <- list(   data_adalite, data_binance, data_binance_withdrawals, data_blockfi, data_CDC,    data_CDC_exchange_rewards, data_CDC_exchange_trades, data_CDC_wallet, data_celsius,   data_coinsmart, data_exodus, data_gemini, data_newton, data_pooltool, data_presearch,   data_shakepay, data_uphold)  formatted.data <- format_detect(exchanges) #> ❯ Scraping historical crypto data #> ❯ Processing historical crypto data"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"adjusted-cost-base","dir":"Articles","previous_headings":"","what":"Adjusted Cost Base","title":"Generate a Full Tax Report","text":"Next, can begin processing data. start formatting Adjusted Cost Base (ACB) transaction. formatted.ACB going core object working future steps. Per default, format_ACB() considers taxable revenue (aquisition $0 ACB) following transaction types: staking, interests, mining. want different treatment transactions (types revenues like cashback airdrops), use .revenue argument format_ACB(). get warning negative values places, therefore might forgotten transactions. check_missing_transactions() function makes easy identify transactions (therefore coin) concerned . Next, might want make sure downloaded latest files exchange. shake phone every day sats, receive daily weekly payments staking, expect latest date recent. use get_latest_transactions() function. stage, possible list transactions coin, transactions. output can long soon many transactions however, showing , can look listby_coin() function example.","code":"formatted.ACB <- format_ACB(formatted.data) #> Process started at 2024-04-12 13:05:24.668214. Please be patient as the transactions process. #> [Formatting ACB (progress bar repeats for each coin)...] #> Warning in format_ACB(formatted.data): WARNING: Some balances have negative values. Double-check for missing transactions. #> Note: Adjusted cost base (ACB) and capital gains have been adjusted for the superficial loss rule. To avoid this, use argument `sup.loss = FALSE`. #> Process ended at 2024-04-12 13:05:26.993207. Total time elapsed: 0.04 minutes check_missing_transactions(formatted.ACB) #> # A tibble: 3 × 26 #> # Groups:   currency [11] #>   date                currency quantity total.price spot.rate transaction  fees #>   <dttm>              <chr>       <dbl>       <dbl>     <dbl> <chr>       <dbl> #> 1 2021-03-07 21:46:57 BAT         52.6        55.5       1.06 sell            0 #> 2 2021-04-05 12:22:00 BAT          8.52        0         1.46 revenue         0 #> 3 2021-04-06 04:47:00 BAT          8.52        9.61      1.13 sell            0 #> # ℹ 19 more variables: description <chr>, comment <chr>, revenue.type <chr>, #> #   value <dbl>, exchange <chr>, rate.source <chr>, currency2 <chr>, #> #   total.quantity <dbl>, suploss.range <Interval>, quantity.60days <dbl>, #> #   share.left60 <dbl>, sup.loss.quantity <dbl>, sup.loss <lgl>, #> #   gains.uncorrected <dbl>, gains.sup <dbl>, gains.excess <lgl>, gains <dbl>, #> #   ACB <dbl>, ACB.share <dbl> get_latest_transactions(formatted.ACB) #> # A tibble: 14 × 2 #> # Groups:   exchange [14] #>    exchange     date                #>    <chr>        <dttm>              #>  1 CDC          2021-07-28 23:23:04 #>  2 CDC.exchange 2021-12-24 15:34:45 #>  3 CDC.wallet   2021-06-26 14:51:02 #>  4 adalite      2021-05-17 21:31:00 #>  5 binance      2022-11-27 08:05:35 #>  6 blockfi      2021-10-24 04:29:23 #>  7 celsius      2021-05-23 05:00:00 #>  8 coinsmart    2021-06-03 02:04:49 #>  9 exodus       2021-06-12 22:31:35 #> 10 gemini       2021-06-18 01:38:54 #> 11 newton       2021-06-16 18:49:11 #> 12 presearch    2021-05-07 05:55:33 #> 13 shakepay     2021-07-10 00:52:19 #> 14 uphold       2021-06-09 04:52:23"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"full-tax-report","dir":"Articles","previous_headings":"","what":"Full Tax Report","title":"Generate a Full Tax Report","text":"Next, need calculate extra bits information final report. Fortunately, prepare_report() function makes easy us. report.info object list containing different info (tables, figures) necessary final report. can accessed individually : Finally, generate report, use print_report() relevant tax year, name individual, report.info object just created:","code":"report.info <- prepare_report(formatted.ACB,                                tax.year = 2021,                                local.timezone = \"America/Toronto\",                               list.prices = list.prices) names(report.info) #> [1] \"report.overview\" \"report.summary\"  \"proceeds\"        \"sup.losses\"      #> [5] \"table.revenues\"  \"tax.box\"         \"pie_exchange\"    \"pie_revenue\"     #> [9] \"local.timezone\" print_report(tax.year = \"2021\",               name = \"Mr. Cryptoltruist\",               report.info)"},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"full-crypto-tax-report-for-tax-year-2021","dir":"Articles","previous_headings":"","what":"Full Crypto Tax Report for Tax Year 2021","title":"Generate a Full Tax Report","text":"Name: Mr. Cryptoltruist Date: Fri Apr 12 13:05:27 2024","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"summary","dir":"Articles","previous_headings":"Full Crypto Tax Report for Tax Year 2021","what":"Summary","title":"Generate a Full Tax Report","text":"Type Amount currency gains 11,705.75 CAD losses 0.00 CAD net 11,705.75 CAD total.cost 15,679.01 CAD value.today 5,806.10 CAD unrealized.gains 607.25 CAD unrealized.losses -10,959.83 CAD unrealized.net -10,352.58 CAD percentage.-62.97% CAD .time.11.69% CAD time percentage (including unrealized gains revenues received) 69.87%. absolute dollars, 11289.56 CAD.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"overview","dir":"Articles","previous_headings":"Full Crypto Tax Report for Tax Year 2021","what":"Overview","title":"Generate a Full Tax Report","text":"date.last currency total.quantity cost.share total.cost gains losses net currency2 2021-12-24 15:34:45 CRO 19,234.2928403 0.71 13,648.74 0.00 0.00 0.00 CRO 2021-10-24 04:29:23 LTC 5.5542096 224.68 1,247.91 2,095.79 0.00 2,095.79 LTC 2021-06-06 22:14:11 ADA 209.0297373 1.23 257.11 0.89 0.00 0.89 ADA 2021-06-06 22:14:11 ADA 209.0297373 1.23 257.11 0.89 0.00 0.89 ADA 2021-08-07 21:43:44 BTC 0.0054492 28,366.27 154.57 133.47 0.00 133.47 BTC 2021-12-24 15:34:45 ETH 0.0761972 1,797.68 136.98 9,410.46 0.00 9,410.46 ETH 2021-12-24 15:34:45 ETH 0.0761972 1,797.68 136.98 9,410.46 0.00 9,410.46 ETH 2021-05-07 05:55:33 PRE 1,001.3000000 0.09 85.59 0.00 0.00 0.00 PRE 2021-05-07 05:55:33 PRE 1,001.3000000 0.09 85.59 0.00 0.00 0.00 PRE 2021-06-18 01:38:54 BAT 29.6939758 2.56 76.08 65.14 0.00 65.14 BAT 2022-11-27 08:05:35 USDC 49.2669990 1.24 60.96 0.00 0.00 0.00 USDC 2022-11-27 08:05:35 BUSD 5.8763653 1.34 7.86 0.00 0.00 0.00 BUSD 2022-11-17 11:54:25 ETHW 0.3559272 8.99 3.20 0.00 0.00 0.00 ETHW 2022-11-27 08:05:35 Total   16,158.68 21,117.10 0.00 21,117.10 Total","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"current-value","dir":"Articles","previous_headings":"Full Crypto Tax Report for Tax Year 2021","what":"Current Value","title":"Generate a Full Tax Report","text":"currency cost.share total.cost rate.today value.today unrealized.gains unrealized.losses unrealized.net currency2 CRO 0.71 13,648.74 0.20 3,882.26  -9,766.48 -9,766.48 CRO LTC 224.68 1,247.91 133.73 742.77  -505.14 -505.14 LTC ADA 1.23 257.11 0.80 167.74  -89.37 -89.37 ADA ADA 1.23 257.11 0.00 0.87  -256.24 -256.24 ADA BTC 28,366.27 154.57 96,255.91 524.51 369.94  369.94 BTC ETH 1,797.68 136.98 4,824.35 367.60 230.62  230.62 ETH ETH 1,797.68 136.98 0.19 0.01  -136.97 -136.97 ETH PRE 0.09 85.59 0.03 28.99  -56.60 -56.60 PRE PRE 0.09 85.59 0.00 0.19  -85.40 -85.40 PRE BAT 2.56 76.08 0.44 13.18  -62.90 -62.90 BAT USDC 1.24 60.96 1.37 67.45 6.49  6.49 USDC BUSD 1.34 7.86 1.37 8.06 0.20  0.20 BUSD ETHW 8.99 3.20 6.94 2.47  -0.73 -0.73 ETHW Total  16,158.68  5,806.10 607.25 -10,959.83 -10,352.58 Total currency cost.share total.cost rate.today value.today unrealized.gains unrealized.losses unrealized.net currency2","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"superficial-losses","dir":"Articles","previous_headings":"Full Crypto Tax Report for Tax Year 2021","what":"Superficial losses","title":"Generate a Full Tax Report","text":"currency sup.loss CRO -0.00 LTC -0.05 Total -0.05","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"revenues","dir":"Articles","previous_headings":"Full Crypto Tax Report for Tax Year 2021","what":"Revenues","title":"Generate a Full Tax Report","text":"exchange date.last total.revenues airdrops referrals staking promos interests rebates rewards forks mining currency CDC 2021-07-23 17:21:19 96.13 0.00 30.17 0.00 0.00 10.36 51.15 1.20 3.20 0.00 CAD CDC.exchange 2021-09-07 00:00:00 1.17 0.00 0.00 0.00 0.00 1.16 0.01 0.00 0.00 0.00 CAD CDC.wallet 2021-06-26 14:51:02 1.25 0.00 0.00 1.25 0.00 0.00 0.00 0.00 0.00 0.00 CAD adalite 2021-05-17 17:16:00 2.66 0.00 0.00 2.66 0.00 0.00 0.00 0.00 0.00 0.00 CAD binance 2021-11-05 04:32:23 2.22 0.00 0.00 0.00 0.00 0.13 2.09 0.00 0.00 0.00 CAD blockfi 2021-08-07 21:43:44 41.02 0.00 8.16 0.00 23.13 9.73 0.00 0.00 0.00 0.00 CAD celsius 2021-05-23 05:00:00 165.48 0.00 50.40 0.00 111.97 3.11 0.00 0.00 0.00 0.00 CAD coinsmart 2021-05-15 16:42:07 17.42 2.42 15.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 CAD exodus 2021-06-06 22:14:11 17.26 0.00 0.00 17.26 0.00 0.00 0.00 0.00 0.00 0.00 CAD gemini 2021-06-18 01:38:54 42.77 17.09 25.68 0.00 0.00 0.00 0.00 0.00 0.00 0.00 CAD newton 2021-06-16 18:49:11 50.00 0.00 50.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 CAD presearch 2021-04-27 19:12:15 0.12 0.12 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 CAD shakepay 2021-06-23 12:21:49 66.28 36.28 30.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 CAD uphold 2021-06-09 04:52:23 21.26 21.26 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 CAD total 2021-11-05 04:32:23 525.04 77.17 209.42 21.17 135.10 24.48 53.25 1.20 3.20 0.00 CAD exchange date.last total.revenues airdrops referrals staking promos interests rebates rewards forks mining currency","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"capital-gains","dir":"Articles","previous_headings":"Important Tax Information for Your Accountant","what":"Capital gains","title":"Generate a Full Tax Report","text":"capital gains 2021 $11,705.75, whereas capital losses $0.00 (net = $11,705.75). taxed 50%. capital losses calculated total capital losses ($0.05) - superficial losses ($0.05) = actual capital losses ($0). total “proceeds” coins sold profit : $18,713.38 (aggregated coins). total ACB coins sold profit : $7,007.63 (average coins). difference two capital gains: $11,705.75. total “proceeds” (adjusted superficial gains) coins sold loss : $0.00 (aggregated coins). total ACB coins sold loss : $0.00 (average coins). difference two capital losses: $0.00.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"income","dir":"Articles","previous_headings":"Important Tax Information for Your Accountant","what":"Income","title":"Generate a Full Tax Report","text":"total taxable income crypto (interest & staking exclusively) 2021 $45.65, considered 100% taxable income. Note per default, amount excludes revenue credit card cashback considered rebate, income, considered acquired fair market value time reception. income reported also excludes forms airdrops rewards (e.g., Shakepay, Brave, Presearch), referrals, promos, considered acquired cost 0$ (thus incur capital gain 100% upon selling). Note wish give different tax treatment different transaction types, can ‘.revenue’ argument ‘ACB’ function. Mining rewards needs labelled individually files using format_ACB().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"total-tax-estimation","dir":"Articles","previous_headings":"Important Tax Information for Your Accountant","what":"Total tax estimation","title":"Generate a Full Tax Report","text":"general, can expect pay tax 50% ($5,852.88) net capital gains + 100% taxable income ($45.65), total $5,898.52. amount taxed based tax bracket. Note capital gains net negative current year, excess capital losses can deferred following years. However, capital losses used year first outstanding capital gains.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"form-t1135","dir":"Articles","previous_headings":"Important Tax Information for Your Accountant","what":"Form T1135","title":"Generate a Full Tax Report","text":"total acquisition cost greater $100,000 point 2021 ($15,679.01 time report), need fill form T1135 (Foreign Income Verification Statement). Form T1135 available download, information can found CRA website.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"summary-table","dir":"Articles","previous_headings":"Important Tax Information for Your Accountant","what":"Summary table","title":"Generate a Full Tax Report","text":"summary need enter lines income tax: Description Amount Comment Line Gains proceeds 18,713.38 Proceeds sold coins (gains) Schedule 3, line 15199 column 2 Gains ACB 7,007.63 ACB sold coins (gains) Schedule 3, line 15199 column 3 Gains 11,705.75 Proceeds - ACB (gains) Schedule 3, lines 15199 column 5 & 15300 50% gains 5,852.87 Half gains T1, line 12700; Schedule 3, line 15300, 19900 Outlays gains 0.00 Expenses trading fees (gains). Normally already integrated ACB Tax software Losses proceeds 0.00 Proceeds sold coins (losses) Schedule 3, line 15199 column 2 Losses ACB 0.00 ACB sold coins (losses) Schedule 3, line 15199 column 3 Losses 0.00 Proceeds - ACB (losses) Schedule 3, lines 15199 column 5 & 15300 50% losses 0.00 Half losses T1, line 12700; Schedule 3, line 15300, 19900 Outlays losses 0.00 Expenses trading fees (losses). Normally already integrated ACB Tax software Foreign income 45.65 Income crypto interest staking considered foreign income T1, line 12100, T1135 Foreign gains 11,705.75 Capital gains crypto considered foreign capital gains T1135","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/articles/report.html","id":"other-situations","dir":"Articles","previous_headings":"Important Tax Information for Your Accountant","what":"Other situations","title":"Generate a Full Tax Report","text":"applicable, may also need enter following: Interest expense money borrowed purchase investments purpose gaining producing income tax-deductible. Use line 22100 (line 221) personal income tax return, completion Schedule 4 (federal).   ……………………………………………………………………………………………………………………………………………………………………………….","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steve Wong. Author, maintainer.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wong S (2024). cryptoTax: Report Crypto Taxes (Canada ). R package version 0.0.6, https://cryptoltruist.github.io/cryptoTax/.","code":"@Manual{,   title = {cryptoTax: Report Crypto Taxes (Canada Only)},   author = {Steve Wong},   year = {2024},   note = {R package version 0.0.6},   url = {https://cryptoltruist.github.io/cryptoTax/}, }"},{"path":"https://cryptoltruist.github.io/cryptoTax/index.html","id":"cryptotax-crypto-taxes-in-r-canada-only-","dir":"","previous_headings":"","what":"Report Crypto Taxes (Canada Only)","title":"Report Crypto Taxes (Canada Only)","text":"Disclaimer: financial advice. Use risks. guarantees whatsoever relation use package. Please consult tax professional necessary. Helps calculate crypto taxes R. First, allowing format .CSV files various exchanges one large dataframe organized transactions. Second, allowing calculate Adjusted Cost Base (ACB), ACB per share, realized unrealized capital gains/losses. Third, calculating revenues gained staking, interest, airdrops, etc. Fourth, calculating superficial losses well, desired. work progress. notice bugs, please report : https://github.com/cryptoltruist/cryptoTax/issues.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/index.html","id":"why-use-cryptotax","dir":"","previous_headings":"","what":"Why use cryptoTax?","title":"Report Crypto Taxes (Canada Only)","text":"benefits using R package crypto taxes opposed online commercial software? Full transparency algorithms (open code) stay control data (need upload another platform) can reuse script (need start scratch every year) limit number transactions Easy automatically recategorize transactions desired Unlimited flexibility thanks power R community can contribute continuous improvement feature requests Easy export csv excel file formatted transactions free","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Report Crypto Taxes (Canada Only)","text":"install, use:","code":"remotes::install_github(\"cryptoltruist/cryptoTax\")"},{"path":"https://cryptoltruist.github.io/cryptoTax/index.html","id":"acb-demo","dir":"","previous_headings":"","what":"ACB demo","title":"Report Crypto Taxes (Canada Only)","text":"calculating ACB, well superficial losses, see corresponding vignette.","code":"library(cryptoTax) data <- data_adjustedcostbase1 data ACB(data, spot.rate = \"price\", sup.loss = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/index.html","id":"supported-exchanges","dir":"","previous_headings":"","what":"Supported exchanges","title":"Report Crypto Taxes (Canada Only)","text":"Currently, following exchanges supported format_* (format_detect()) functions: Adalite Binance BlockFi Crypto.com (app, exchange, wallet) Celsius CoinSmart Exodus wallet Gemini Newton Pooltool (ADA) Presearch Shakepay Uphold support another exchange listed , please open issue. can also prepare file according style one exchanges use corresponding function.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/index.html","id":"workflow-demo","dir":"","previous_headings":"","what":"Workflow demo","title":"Report Crypto Taxes (Canada Only)","text":"","code":"# Prepare list of coins my.coins <- c(\"BTC\", \"CRO\", \"ETH\", \"ETHW\") list.prices <- prepare_list_prices(coins = my.coins, start.date = \"2021-01-01\") #> ❯ Scraping historical crypto data #> ❯ Processing historical crypto data # Note that for some exchanges this step may be unnecessary  # Load data and format shakepay file data(data_shakepay) formatted.shakepay <- format_shakepay(data_shakepay)  # Load data and format CDC file data(data_CDC) formatted.CDC <- format_CDC(data_CDC)  # Merge data from the different exchanges all.data <- merge_exchanges(formatted.shakepay, formatted.CDC)  # Format data with ACB formatted.ACB <- format_ACB(all.data) #> Process started at 2023-02-10 17:20:47. Please be patient as the transactions process. #> [Formatting ACB (progress bar repeats for each coin)...] #> Process ended at 2023-02-10 17:20:49. Total time elapsed: 0.02 minutes  # Let's get a preview of the output as.data.frame(formatted.ACB[c(1, 4, 8, 10, 19, 20), c(1:6, 7:14, 24:26)])"},{"path":"https://cryptoltruist.github.io/cryptoTax/index.html","id":"summary-info","dir":"","previous_headings":"","what":"Summary info","title":"Report Crypto Taxes (Canada Only)","text":"","code":"# Get latest ACB.share for each coin (ACB) report_overview(formatted.ACB,   today.data = TRUE, tax.year = \"2021\",   local.timezone = \"America/Toronto\",   list.prices = list.prices ) #> gains, losses, and net have been filtered for tax year 2021 # Get summary of realized capital gains and losses report_summary(formatted.ACB,   today.data = TRUE, tax.year = \"2021\",   local.timezone = \"America/Toronto\",   list.prices = list.prices ) #> gains, losses, and net have been filtered for tax year 2021 (time zone = America/Toronto)"},{"path":"https://cryptoltruist.github.io/cryptoTax/index.html","id":"revenue-estimation","dir":"","previous_headings":"","what":"Revenue estimation","title":"Report Crypto Taxes (Canada Only)","text":"Disclaimer: financial advice. Use risks. guarantees whatsoever relation use package. Please consult tax professional necessary.","code":"table.revenues <- report_revenues(formatted.ACB, tax.year = \"2021\") #> Note: revenues have been filtered for tax year 2021 table.revenues # Plot revenues by exchange crypto_pie(table.revenues) # Plot revenues by reward type crypto_pie(table.revenues, by = \"revenue.type\")"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/ACB.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate capital gains from realized gain transactions — ACB","title":"Calculate capital gains from realized gain transactions — ACB","text":"Calculate realized unrealized capital gains/losses","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/ACB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate capital gains from realized gain transactions — ACB","text":"","code":"ACB(   data,   transaction = \"transaction\",   price = \"price\",   quantity = \"quantity\",   fees = \"fees\",   total.price = \"total.price\",   spot.rate = \"spot.rate\",   as.revenue = c(\"staking\", \"interests\", \"mining\"),   sup.loss = TRUE,   cl = NULL,   verbose = TRUE )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/ACB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate capital gains from realized gain transactions — ACB","text":"data dataframe transaction Name transaction column price Name price column quantity Name quantity column fees Name fees column total.price Name total.price column spot.rate Name spot.rate column .revenue Name .revenue column sup.loss Logical, whether calculate superficial losses cl Number cores use parallel processing. verbose Logical: FALSE, print progress bar warnings console.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/ACB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate capital gains from realized gain transactions — ACB","text":"data frame, following columns: date, transaction, quantity, price, fees, total.price, total.quantity, ACB, ACB.share, gains","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/ACB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate capital gains from realized gain transactions — ACB","text":"","code":"data <- data_adjustedcostbase1 ACB(data, spot.rate = \"price\", sup.loss = FALSE) #>         date transaction quantity price fees total.price total.quantity  ACB #> 1 2014-03-03         buy      100    50   10        5000            100 5010 #> 2 2014-05-01        sell       50   120   10        6000             50 2505 #> 3 2014-07-18         buy       50   130   10        6500            100 9015 #> 4 2014-09-25        sell       40    90   10        3600             60 5409 #>   ACB.share gains #> 1     50.10    NA #> 2     50.10  3485 #> 3     90.15    NA #> 4     90.15   -16 ACB(data, spot.rate = \"price\") #>         date transaction quantity price fees total.price total.quantity #> 1 2014-03-03         buy      100    50   10        5000            100 #> 2 2014-05-01        sell       50   120   10        6000             50 #> 3 2014-07-18         buy       50   130   10        6500            100 #> 4 2014-09-25        sell       40    90   10        3600             60 #>                    suploss.range quantity.60days share.left60 sup.loss.quantity #> 1 2014-02-01 UTC--2014-04-02 UTC             100          100                 0 #> 2 2014-04-01 UTC--2014-05-31 UTC               0           50                 0 #> 3 2014-06-18 UTC--2014-08-17 UTC              50          100                 0 #> 4 2014-08-26 UTC--2014-10-25 UTC               0           60                 0 #>   sup.loss gains.uncorrected gains.sup gains.excess gains  ACB ACB.share #> 1    FALSE                 0        NA           NA    NA 5010     50.10 #> 2    FALSE              3485        NA           NA  3485 2505     50.10 #> 3    FALSE                 0        NA           NA    NA 9015     90.15 #> 4    FALSE               -16        NA           NA   -16 5409     90.15"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/USD2CAD.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert USD to CAD — USD2CAD","title":"Convert USD to CAD — USD2CAD","text":"function allows convert USD CAD.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/USD2CAD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert USD to CAD — USD2CAD","text":"","code":"USD2CAD(   data,   start.date = \"2020-01-01\",   end.date = lubridate::now(\"UTC\"),   conversion = \"USD\",   currency = \"CAD\",   force = FALSE )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/USD2CAD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert USD to CAD — USD2CAD","text":"data data start.date date start reporting prices . end.date date end reporting prices . conversion convert currency convert force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/USD2CAD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert USD to CAD — USD2CAD","text":"data frame, following columns: date, CAD.rate.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/USD2CAD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert USD to CAD — USD2CAD","text":"","code":"formatted.dates <- format_shakepay(data_shakepay)[1] USD2CAD(formatted.dates) #> ❯ Scraping historical crypto data #>  #> ❯ Processing historical crypto data #>  #>                  date CAD.rate #> 1 2021-05-07 14:50:41 1.221036 #> 2 2021-05-07 21:25:36 1.221036 #> 3 2021-05-08 12:12:57 1.214679 #> 4 2021-05-09 12:22:07 1.213670 #> 5 2021-05-21 12:47:14 1.209213 #> 6 2021-06-11 12:03:31 1.210089 #> 7 2021-06-23 12:21:49 1.233934 #> 8 2021-07-10 00:52:19 1.248571"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/USD2CAD_priceR.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert USD to CAD (using priceR) — USD2CAD_priceR","title":"Convert USD to CAD (using priceR) — USD2CAD_priceR","text":"function allows convert USD CAD. priceR now requires API key https://exchangerate.host/... See details package author README : https://github.com/stevecondylios/priceR \"Set takes minute free 100 requests per account per calendar month.\" \"Go https://exchangerate.host/, create free account, replace 7e5e3140140bd8e4f4650cc41fc772c0 API key following, run per R session.\"","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/USD2CAD_priceR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert USD to CAD (using priceR) — USD2CAD_priceR","text":"","code":"USD2CAD_priceR(data, conversion = \"USD\", currency = \"CAD\")"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/USD2CAD_priceR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert USD to CAD (using priceR) — USD2CAD_priceR","text":"data data conversion convert currency convert ","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/USD2CAD_priceR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert USD to CAD (using priceR) — USD2CAD_priceR","text":"data frame, following columns: date, CAD.rate.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/check_missing_transactions.html","id":null,"dir":"Reference","previous_headings":"","what":"View rows with negative total balances — check_missing_transactions","title":"View rows with negative total balances — check_missing_transactions","text":"View rows negative total balances help identify missing transactions.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/check_missing_transactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View rows with negative total balances — check_missing_transactions","text":"","code":"check_missing_transactions(formatted.ACB)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/check_missing_transactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View rows with negative total balances — check_missing_transactions","text":"formatted.ACB formatted.ACB file","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/check_missing_transactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View rows with negative total balances — check_missing_transactions","text":"data frame, filtered rows containing total quantity smaller zero.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/check_missing_transactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View rows with negative total balances — check_missing_transactions","text":"","code":"all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) check_missing_transactions(formatted.ACB) #> # A tibble: 0 × 26 #> # Groups:   currency [2] #> # ℹ 26 variables: date <dttm>, currency <chr>, quantity <dbl>, #> #   total.price <dbl>, spot.rate <dbl>, transaction <chr>, fees <dbl>, #> #   description <chr>, comment <chr>, revenue.type <chr>, value <dbl>, #> #   exchange <chr>, rate.source <chr>, currency2 <chr>, total.quantity <dbl>, #> #   suploss.range <Interval>, quantity.60days <dbl>, share.left60 <dbl>, #> #   sup.loss.quantity <dbl>, sup.loss <lgl>, gains.uncorrected <dbl>, #> #   gains.sup <lgl>, gains.excess <lgl>, gains <dbl>, ACB <dbl>, …"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/check_new_transactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for new transactions — check_new_transactions","title":"Check for new transactions — check_new_transactions","text":"Check new transactions given exchange","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/check_new_transactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for new transactions — check_new_transactions","text":"","code":"check_new_transactions(   data,   known.transactions,   transactions.col,   description.col = NULL )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/check_new_transactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for new transactions — check_new_transactions","text":"data dataframe known.transactions list known transactions transactions.col name transaction column description.col name description column, available.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/check_new_transactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for new transactions — check_new_transactions","text":"warning, new transactions. Returns nothing otherwise.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/check_new_transactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for new transactions — check_new_transactions","text":"","code":"data <- data_CDC[1:5, ] known.transactions <- c(\"crypto_purchase\", \"lockup_lock\") check_new_transactions(data,                         known.transactions = known.transactions,                        transactions.col = \"Transaction.Kind\",                        description.col = \"Transaction.Description\") #> Warning: New transaction types detected! These may be unaccounted for: crypto_viban_exchange, mco_stake_reward, rewards_platform_deposit_credited, admin_wallet_credited. Associated descriptions: ETH -> CAD, BTC -> CAD, CRO Stake Rewards, Mission Rewards Deposit, Adjustment (Credit)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/cryptoTax-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cryptoTax: Report Crypto Taxes (Canada Only) — cryptoTax-package","title":"cryptoTax: Report Crypto Taxes (Canada Only) — cryptoTax-package","text":"Helps calculate crypto taxes R. First, allowing format .CSV files various exchanges one large data frame organized transactions. Second, allowing calculate Adjusted Cost Base (ACB), ACB per share, realized unrealized capital gains/losses. Third, calculating revenues gained staking, interest, airdrops, etc. Fourth, calculating superficial losses well. *Disclaimer: financial advice. Use risks. guarantees whatsoever relation use package. Please consult tax professional necessary*.","code":""},{"path":[]},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/cryptoTax-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cryptoTax: Report Crypto Taxes (Canada Only) — cryptoTax-package","text":"Maintainer: Steve Wong mr.cryptoltruist@gmail.com","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/crypto_pie.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a pie chart of your crypto revenues — crypto_pie","title":"Make a pie chart of your crypto revenues — crypto_pie","text":"Format .csv file Newton later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/crypto_pie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a pie chart of your crypto revenues — crypto_pie","text":"","code":"crypto_pie(table.revenues, by = \"exchange\")"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/crypto_pie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a pie chart of your crypto revenues — crypto_pie","text":"table.revenues revenue table plot plot element, one c(\"exchange\", \"revenue.type\").","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/crypto_pie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a pie chart of your crypto revenues — crypto_pie","text":"ggplot2 object form pie chart.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/crypto_pie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a pie chart of your crypto revenues — crypto_pie","text":"","code":"shakepay <- format_shakepay(data_shakepay) newton <- format_newton(data_newton) all.data <- merge_exchanges(shakepay, newton) formatted.ACB <- format_ACB(all.data, verbose = FALSE) table.revenues <- report_revenues(formatted.ACB) crypto_pie(table.revenues)  crypto_pie(table.revenues, by = \"revenue.type\")"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Crypto.com transaction history file — data_CDC","title":"Sample data set of a fictive Crypto.com transaction history file — data_CDC","text":"fictive Crypto.com data set demonstrate format_CDC().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Crypto.com transaction history file — data_CDC","text":"","code":"data_CDC"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Crypto.com transaction history file — data_CDC","text":"data frame 19 rows 11 variables: Timestamp..UTC. date Transaction.Description transaction description Currency currency Amount quantity .Currency currency traded coin .Amount quantity traded coin Native.Currency usually CAD Native.Amount equivalent value CAD Native.Amount...USD. equivalent value USD Transaction.Kind Specific transaction identifier Transaction.Hash blockchain address withdrawing","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Crypto.com transaction history file — data_CDC","text":"https://crypto.com/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_exchange_rewards.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Crypto.com exchange rewards transaction history file — data_CDC_exchange_rewards","title":"Sample data set of a fictive Crypto.com exchange rewards transaction history file — data_CDC_exchange_rewards","text":"fictive Crypto.com exchange rewards data set demonstrate format_CDC_exchange_rewards().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_exchange_rewards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Crypto.com exchange rewards transaction history file — data_CDC_exchange_rewards","text":"","code":"data_CDC_exchange_rewards"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_exchange_rewards.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Crypto.com exchange rewards transaction history file — data_CDC_exchange_rewards","text":"data frame 10 rows 12 variables: Date date Sent.Amount sent quantity Sent.Currency sent currency Received.Amount received quantity Received.Currency received currency Fee.Amount fee quantity Fee.Currency fee currency Net.Worth.Amount net worth quantity Net.Worth.Currency net worth currency Label transaction type Description description TxHash transaction hash","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_exchange_rewards.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Crypto.com exchange rewards transaction history file — data_CDC_exchange_rewards","text":"https://crypto.com/exchange/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_exchange_trades.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Crypto.com exchange trades transaction history file — data_CDC_exchange_trades","title":"Sample data set of a fictive Crypto.com exchange trades transaction history file — data_CDC_exchange_trades","text":"fictive Crypto.com exchange trades data set demonstrate format_CDC_exchange_trades().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_exchange_trades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Crypto.com exchange trades transaction history file — data_CDC_exchange_trades","text":"","code":"data_CDC_exchange_trades"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_exchange_trades.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Crypto.com exchange trades transaction history file — data_CDC_exchange_trades","text":"data frame 7 rows 10 variables: Order.ID order id Trade.ID trade id Time..UTC. date Symbol trade pair Side buyer seller side Trade.Price trade price Trade.Amount trade quantity Volume..Business volume business Fee fee Fee.Currency fee currency","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_exchange_trades.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Crypto.com exchange trades transaction history file — data_CDC_exchange_trades","text":"https://crypto.com/exchange/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_wallet.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Crypto.com wallet transaction history file — data_CDC_wallet","title":"Sample data set of a fictive Crypto.com wallet transaction history file — data_CDC_wallet","text":"fictive Crypto.com wallet data set demonstrate format_CDC_wallet().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_wallet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Crypto.com wallet transaction history file — data_CDC_wallet","text":"","code":"data_CDC_wallet"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_wallet.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Crypto.com wallet transaction history file — data_CDC_wallet","text":"data frame 10 rows 12 variables: Date date Sent.Amount sent quantity Sent.Currency sent currency Received.Amount received quantity Received.Currency received currency Fee.Amount fee quantity Fee.Currency fee currency Net.Worth.Amount net worth quantity Net.Worth.Currency net worth currency Label transaction type Description description TxHash transaction hash","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_CDC_wallet.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Crypto.com wallet transaction history file — data_CDC_wallet","text":"https://crypto.com/defi-wallet","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_adalite.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Adalite transaction history file — data_adalite","title":"Sample data set of a fictive Adalite transaction history file — data_adalite","text":"fictive Adalite data set demonstrate format_adalite().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_adalite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Adalite transaction history file — data_adalite","text":"","code":"data_adalite"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_adalite.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Adalite transaction history file — data_adalite","text":"data frame 10 rows 11 variables: Date date Transaction.ID transaction ID Type transaction type Received...disclaimer..may...accurate...first.sender.address.. address coins received Received.amount received amount Received.currency received currency Sent.amount sent amount Sent.currency sent currency Fee.amount fee amount Fee.currency fee currency X used","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_adalite.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Adalite transaction history file — data_adalite","text":"https://adalite.io/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_adjustedcostbase1.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data sets provided by adjustedcostbase.ca — data_adjustedcostbase1","title":"Sample data sets provided by adjustedcostbase.ca — data_adjustedcostbase1","text":"Data sets adjustedcostbase.ca demonstrate adjusted cost base well capital gains/losses. Used demo ACB() function.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_adjustedcostbase1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data sets provided by adjustedcostbase.ca — data_adjustedcostbase1","text":"","code":"data_adjustedcostbase1  data_adjustedcostbase2  data_adjustedcostbase3  data_adjustedcostbase4  data_adjustedcostbase5  data_adjustedcostbase6"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_adjustedcostbase1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data sets provided by adjustedcostbase.ca — data_adjustedcostbase1","text":"Data frames 4 variables: date date transaction buy sell quantity much stock/coin price spot rate, dollars fees transaction fees object class data.frame 4 rows 4 columns. object class data.frame 4 rows 4 columns. object class data.frame 3 rows 4 columns. object class data.frame 2 rows 4 columns. object class data.frame 5 rows 4 columns.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_adjustedcostbase1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample data sets provided by adjustedcostbase.ca — data_adjustedcostbase1","text":"https://www.adjustedcostbase.ca/blog/--calculate-adjusted-cost-base-acb--capital-gains/ https://www.adjustedcostbase.ca/blog/---superficial-loss-rule/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_binance.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Binance transaction history file — data_binance","title":"Sample data set of a fictive Binance transaction history file — data_binance","text":"fictive Binance data set demonstrate data_binance().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_binance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Binance transaction history file — data_binance","text":"","code":"data_binance"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_binance.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Binance transaction history file — data_binance","text":"data frame 39 rows 7 variables: User_ID user ID UTC_Time date Account account type Operation transaction type Coin currency Change quantity Remark comment","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_binance.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Binance transaction history file — data_binance","text":"https://www.binance.com/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_binance_withdrawals.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Binance withdrawals transaction history file — data_binance_withdrawals","title":"Sample data set of a fictive Binance withdrawals transaction history file — data_binance_withdrawals","text":"fictive withdrawals Binance data set demonstrate format_binance_withdrawals().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_binance_withdrawals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Binance withdrawals transaction history file — data_binance_withdrawals","text":"","code":"data_binance_withdrawals"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_binance_withdrawals.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Binance withdrawals transaction history file — data_binance_withdrawals","text":"data frame 3 rows 10 variables: Date(UTC) date Coin currency Network network type Amount quantity TransactionFee transaction fee Address destination address TXID transaction ID SourceAddress source address PaymentID payment ID Status status","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_binance_withdrawals.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Binance withdrawals transaction history file — data_binance_withdrawals","text":"https://www.binance.com/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_blockfi.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive BlockFi transaction history file — data_blockfi","title":"Sample data set of a fictive BlockFi transaction history file — data_blockfi","text":"fictive BlockFi data set demonstrate format_blockfi().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_blockfi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive BlockFi transaction history file — data_blockfi","text":"","code":"data_blockfi"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_blockfi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive BlockFi transaction history file — data_blockfi","text":"data frame 15 rows 4 variables: Cryptocurrency currency Amount quantity Transaction.Type transaction type Confirmed.date","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_blockfi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive BlockFi transaction history file — data_blockfi","text":"https://blockfi.com/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_celsius.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Celsius transaction history file — data_celsius","title":"Sample data set of a fictive Celsius transaction history file — data_celsius","text":"fictive Celsius data set demonstrate format_celsius().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_celsius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Celsius transaction history file — data_celsius","text":"","code":"data_celsius"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_celsius.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Celsius transaction history file — data_celsius","text":"data frame 12 rows 9 variables: Internal.id internal id Date..time date Transaction.type transaction type Coin.type coin type Coin.amount quantity USD.Value value USD Original.Reward.Coin original reward coin Reward.Amount..Original.Coin reward amount original coin Confirmed status transaction","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_celsius.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Celsius transaction history file — data_celsius","text":"https://celsius.network/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinbase.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Coinbase transaction history file — data_coinbase","title":"Sample data set of a fictive Coinbase transaction history file — data_coinbase","text":"fictive Coinbase data set demonstrate format_coinbase().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinbase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Coinbase transaction history file — data_coinbase","text":"","code":"data_coinbase"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinbase.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Coinbase transaction history file — data_coinbase","text":"data frame 5 rows 10 variables: Timestamp date Transaction.Type transaction type Asset coin Quantity.Transacted quantity Spot.Price.Currency currency spot price Spot.Price..Transaction spot price Subtotal subtotal Total..inclusive..fees...spread. Grand total Fees...Spread fees Notes comments","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinbase.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Coinbase transaction history file — data_coinbase","text":"https://www.coinbase.com/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinpanda1.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data sets provided by coinpanda.io — data_coinpanda1","title":"Sample data sets provided by coinpanda.io — data_coinpanda1","text":"Data sets coinpanda.io demonstrate adjusted cost base well capital gains/losses. Used demo ACB() function.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinpanda1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data sets provided by coinpanda.io — data_coinpanda1","text":"","code":"data_coinpanda1  data_coinpanda2"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinpanda1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data sets provided by coinpanda.io — data_coinpanda1","text":"data frame 4 rows 6 variables: type type transaction date date currency coin amount quantity price total.price fees transaction fees object class data.frame 4 rows 6 columns.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinpanda1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data sets provided by coinpanda.io — data_coinpanda1","text":"https://coinpanda.io/blog/crypto-taxes-canada-adjusted-cost-base/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinsmart.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive CoinSmart transaction history file — data_coinsmart","title":"Sample data set of a fictive CoinSmart transaction history file — data_coinsmart","text":"fictive CoinSmart data set demonstrate format_coinsmart().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinsmart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive CoinSmart transaction history file — data_coinsmart","text":"","code":"data_coinsmart"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinsmart.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive CoinSmart transaction history file — data_coinsmart","text":"data frame 8 rows 7 variables: Credit amount added Debit amount removed TransactionType transaction type ReferenceType description Product currency Balance current balance TimeStamp date","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_coinsmart.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive CoinSmart transaction history file — data_coinsmart","text":"https://www.coinsmart.com/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_cryptotaxcalculator1.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data sets provided by cryptotaxcalculator.io — data_cryptotaxcalculator1","title":"Sample data sets provided by cryptotaxcalculator.io — data_cryptotaxcalculator1","text":"Data sets cryptotaxcalculator.io demonstrate adjusted cost base well capital gains/losses. Used demo ACB() function.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_cryptotaxcalculator1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data sets provided by cryptotaxcalculator.io — data_cryptotaxcalculator1","text":"","code":"data_cryptotaxcalculator1  data_cryptotaxcalculator2"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_cryptotaxcalculator1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data sets provided by cryptotaxcalculator.io — data_cryptotaxcalculator1","text":"data frame 4 rows 4 variables: date date trade type transaction currency coin price spot rate, dollars quantity much stock/coin object class data.frame 4 rows 5 columns.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_cryptotaxcalculator1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data sets provided by cryptotaxcalculator.io — data_cryptotaxcalculator1","text":"https://cryptotaxcalculator.io/guides/crypto-tax-canada-cra/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_exodus.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Exodus wallet transaction history file — data_exodus","title":"Sample data set of a fictive Exodus wallet transaction history file — data_exodus","text":"fictive Exodus wallet data set demonstrate format_exodus().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_exodus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Exodus wallet transaction history file — data_exodus","text":"","code":"data_exodus"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_exodus.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Exodus wallet transaction history file — data_exodus","text":"data frame 8 rows 17 variables: DATE date TYPE transaction type FROMPORTFOLIO TOPORTFOLIO OUTAMOUNT quantity sent OUTCURRENCY currency sent FEEAMOUNT fees FEECURRENCY fee currency TOADDRESS address sent OUTTXID transaction ID transactions OUTTXURL transaction URL transactions INAMOUNT quantity received INCURRENCY currency received INTXID transaction ID transactions INTXURL transaction URL transactions ORDERID order ID PERSONALNOTE personal notes","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_exodus.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Exodus wallet transaction history file — data_exodus","text":"https://www.exodus.com/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_gemini.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Gemini transaction history file — data_gemini","title":"Sample data set of a fictive Gemini transaction history file — data_gemini","text":"fictive Gemini data set demonstrate format_gemini().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_gemini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Gemini transaction history file — data_gemini","text":"","code":"data_gemini"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_gemini.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Gemini transaction history file — data_gemini","text":"data frame 14 rows 27 variables: Date date Time (UTC) date UTC Type transaction type Symbol currency currency pair Specification description Liquidity Indicator maker taker Trading Fee Rate (bps) trading fee rate BTC Amount BTC BTC quantity Fee (BTC) BTC BTC transaction fees BTC Balance BTC BTC balance LTC Amount LTC LTC quantity Fee (LTC) LTC LTC transaction fees LTC Balance LTC LTC balance BAT Amount BAT BAT quantity Fee (BAT) BAT BAT transaction fees BAT Balance BAT BAT balance Trade ID trade ID Order ID order ID Order Date order date Order Time order time Client Order ID client order ID API Session API session Tx Hash transaction hash Deposit Destination deposit destination address Deposit Tx Output deposit transaction output Withdrawal Destination withdrawal destination address Withdrawal Tx Output withdrawal transaction output","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_gemini.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Gemini transaction history file — data_gemini","text":"https://www.gemini.com/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_generic1.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data sets of fictive generic transaction history files — data_generic1","title":"Sample data sets of fictive generic transaction history files — data_generic1","text":"Fictive generic data sets demonstrate format_generic().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_generic1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data sets of fictive generic transaction history files — data_generic1","text":"","code":"data_generic1  data_generic2  data_generic3  data_generic4"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_generic1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data sets of fictive generic transaction history files — data_generic1","text":"data frame 3 rows 6-8 variables: Date date Currency currency Quantity quantity Spot.Rate spot rate, dollars Total.Price cost transaction Transaction type transaction Fees transaction fees Exchange exchange object class data.frame 3 rows 7 columns. object class data.frame 3 rows 7 columns. object class data.frame 3 rows 6 columns.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_koinly.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data sets provided by koinly.io — data_koinly","title":"Sample data sets provided by koinly.io — data_koinly","text":"data set koinly.io demonstrate adjusted cost base well capital gains/losses. Used demo ACB() function.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_koinly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data sets provided by koinly.io — data_koinly","text":"","code":"data_koinly"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_koinly.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data sets provided by koinly.io — data_koinly","text":"data frame 4 rows 4 variables: date date transaction buy sell currency coin quantity much stock/coin spot.rate price coin","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_koinly.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data sets provided by koinly.io — data_koinly","text":"https://koinly.io/blog/calculating-crypto-taxes-canada/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_newton.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Newton transaction history file — data_newton","title":"Sample data set of a fictive Newton transaction history file — data_newton","text":"fictive Newton data set demonstrate format_newton().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_newton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Newton transaction history file — data_newton","text":"","code":"data_newton"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_newton.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Newton transaction history file — data_newton","text":"data frame 12 rows 3 variables: Date date Type transaction type Received.Quantity received quantity Received.Currency received currency Sent.Quantity sent quantity Sent.Currency sent currency Fee.Amount fee amount Fee.Currency fee currency Tag tag","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_newton.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Newton transaction history file — data_newton","text":"https://www.newton.co/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_pooltool.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Cardano PoolTool transaction history file — data_pooltool","title":"Sample data set of a fictive Cardano PoolTool transaction history file — data_pooltool","text":"fictive Cardano PoolTool data set demonstrate format_pooltool().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_pooltool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Cardano PoolTool transaction history file — data_pooltool","text":"","code":"data_pooltool"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_pooltool.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Cardano PoolTool transaction history file — data_pooltool","text":"data frame 10 rows 12 variables: date date epoch epoch stake total staked pool staking pool operator_rewards rewards operator stake_rewards rewards staking total_rewards rewards operator + staking rate (usually) CAD rate currency (usually) CAD operator_rewards_value (usually) CAD value operator rewards stake_rewards_value (usually) CAD value staking rewards value (usually) CAD value operator + staking rewards","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_pooltool.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Cardano PoolTool transaction history file — data_pooltool","text":"https://pooltool.io/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_presearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Presearch transaction history file — data_presearch","title":"Sample data set of a fictive Presearch transaction history file — data_presearch","text":"fictive Presearch data set demonstrate format_presearch().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_presearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Presearch transaction history file — data_presearch","text":"","code":"data_presearch"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_presearch.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Presearch transaction history file — data_presearch","text":"data frame 12 rows 3 variables: date date amount quantity description description","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_presearch.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Presearch transaction history file — data_presearch","text":"https://presearch.com/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_shakepay.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Shakepay transaction history file — data_shakepay","title":"Sample data set of a fictive Shakepay transaction history file — data_shakepay","text":"fictive Shakepay data set demonstrate format_shakepay().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_shakepay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Shakepay transaction history file — data_shakepay","text":"","code":"data_shakepay"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_shakepay.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Shakepay transaction history file — data_shakepay","text":"data frame 10 rows 11 variables: Transaction.Type transaction type Date date Amount.Debited amount debited Debit.Currency debit currency Amount.Credited amount credited Credit.Currency credit currency Buy...Sell.Rate \"spot rate\" trade Direction purchase, sale, credit Spot.Rate actual spot rate shakestats Source...Destination withdrawal address Blockchain.Transaction.ID blockchain transaction number","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_shakepay.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Shakepay transaction history file — data_shakepay","text":"https://shakepay.com/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_uphold.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set of a fictive Uphold transaction history file — data_uphold","title":"Sample data set of a fictive Uphold transaction history file — data_uphold","text":"fictive Uphold data set demonstrate format_uphold().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_uphold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data set of a fictive Uphold transaction history file — data_uphold","text":"","code":"data_uphold"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_uphold.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data set of a fictive Uphold transaction history file — data_uphold","text":"data frame 10 rows 12 variables: Date date Destination destination Destination.Amount destination amount Destination.Currency destination currency Fee.Amount fee amount Fee.Currency fee currency Id transaction id Origin origin Origin.Amount origin amount Origin.Currency origin currency Status transaction status Type transaction type","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/data_uphold.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data set of a fictive Uphold transaction history file — data_uphold","text":"https://uphold.com/","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_ACB.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats transactions with ACB — format_ACB","title":"Formats transactions with ACB — format_ACB","text":"Formats transaction data Adjusted Cost Base (ACB), along ACB per share realized capital gains losses.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_ACB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats transactions with ACB — format_ACB","text":"","code":"format_ACB(   data,   as.revenue = c(\"staking\", \"interests\", \"mining\"),   sup.loss = TRUE,   cl = NULL,   verbose = TRUE )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_ACB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats transactions with ACB — format_ACB","text":"data dataframe .revenue treated revenue, list c(\"staking\", \"interests\", \"mining\"). sup.loss Logical, whether take superficial losses account. cl Number cores use parallel processing. verbose Logical: FALSE, print progress bar warnings console.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_ACB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats transactions with ACB — format_ACB","text":"data frame, formatted Adjusted Cost Base (ACB).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_ACB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats transactions with ACB — format_ACB","text":"","code":"all.data <- format_shakepay(data_shakepay) format_ACB(all.data, verbose = FALSE) #> # A tibble: 8 × 26 #> # Groups:   currency [2] #>   date                currency  quantity total.price spot.rate transaction  fees #>   <dttm>              <chr>        <dbl>       <dbl>     <dbl> <chr>       <dbl> #> 1 2021-05-07 14:50:41 BTC       0.00104         53.0    51002. buy             0 #> 2 2021-05-07 21:25:36 CAD      30                0          1  revenue         0 #> 3 2021-05-08 12:12:57 BTC       0.00011          0      52582. revenue         0 #> 4 2021-05-09 12:22:07 BTC       0.00012          0      50287. revenue         0 #> 5 2021-05-21 12:47:14 BTC       0.00013          0      56528. revenue         0 #> 6 2021-06-11 12:03:31 BTC       0.00014          0      59978. revenue         0 #> 7 2021-06-23 12:21:49 BTC       0.00015          0      58099. revenue         0 #> 8 2021-07-10 00:52:19 BTC       0.000530        31.3    59007. sell            0 #> # ℹ 19 more variables: description <chr>, comment <chr>, revenue.type <chr>, #> #   value <dbl>, exchange <chr>, rate.source <chr>, currency2 <chr>, #> #   total.quantity <dbl>, suploss.range <Interval>, quantity.60days <dbl>, #> #   share.left60 <dbl>, sup.loss.quantity <dbl>, sup.loss <lgl>, #> #   gains.uncorrected <dbl>, gains.sup <lgl>, gains.excess <lgl>, gains <dbl>, #> #   ACB <dbl>, ACB.share <dbl>"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Crypto.com App file — format_CDC","title":"Format Crypto.com App file — format_CDC","text":"Format .csv transaction history file Crypto.com later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Crypto.com App file — format_CDC","text":"","code":"format_CDC(data)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Crypto.com App file — format_CDC","text":"data dataframe","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Crypto.com App file — format_CDC","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format Crypto.com App file — format_CDC","text":"aware CDC unfortunately include withdrawal fees exported transaction files (please lobby include feature). function attempts guess known withdrawal fees point time depending withdrawals made, withdrawal fees certainly inaccurate. make manual correction withdrawal fees using format_CDC, resulting dataframe.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Crypto.com App file — format_CDC","text":"","code":"format_CDC(data_CDC) #> Object 'USD2CAD.table' already exists. Reusing 'USD2CAD.table'. To force a fresh download, use argument 'force = TRUE'. #>                   date currency     quantity total.price    spot.rate #> 1  2021-05-03 22:05:50      BTC 7.333710e-04    51.25000 6.988278e+04 #> 2  2021-05-07 23:06:50      ETH 2.059201e-02    54.21000 2.632575e+03 #> 3  2021-05-15 18:07:10      CRO 1.824360e+02    53.42000 2.928150e-01 #> 4  2021-05-23 22:09:39      CRO 1.179468e+02    30.17272 2.558163e-01 #> 5  2021-05-29 23:10:59      CRO 6.403954e+00     1.13000 1.764535e-01 #> 6  2021-06-02 19:11:52      CRO 5.361367e+01    10.99000 2.049850e-01 #> 7  2021-06-10 23:12:24      CRO 8.635724e+01    16.94000 1.961619e-01 #> 8  2021-06-11 19:13:58      CRO 1.736890e+01     9.19000 5.291066e-01 #> 9  2021-06-16 20:14:29      CRO 2.250418e+01    11.65000 5.176817e-01 #> 10 2021-06-18 21:15:51      ETH 1.377500e-05     0.05000 3.629764e+03 #> 11 2021-06-19 21:16:30      CRO 8.452621e+00     1.25000 1.478831e-01 #> 12 2021-06-27 21:17:50      ETH 7.632668e-04     3.12000 4.087692e+03 #> 13 2021-07-06 22:18:40      CRO 3.207992e-01     0.26000 8.104758e-01 #> 14 2021-07-11 20:19:55     ETHW 3.558067e-01     3.20000 8.993647e+00 #> 15 2021-07-14 18:20:27      CRO 2.476190e+00     1.20000 4.846154e-01 #> 16 2021-07-23 17:21:19      CRO 3.716026e+01     6.98000 1.878351e-01 #> 17 2021-07-25 18:22:02      BTC 5.320542e-04    35.00000 6.578278e+04 #> 18 2021-07-28 23:23:04      ETH 9.963655e-03    35.00000 3.512767e+03 #>    transaction                         description                   comment #> 1          buy                     crypto_purchase                   Buy BTC #> 2          buy                     crypto_purchase                   Buy ETH #> 3          buy                     crypto_purchase                   Buy CRO #> 4      revenue                       referral_gift    Sign-up Bonus Unlocked #> 5      revenue              referral_card_cashback             Card Cashback #> 6      revenue                       reimbursement      Card Rebate: Spotify #> 7      revenue                       reimbursement      Card Rebate: Netflix #> 8      revenue                       reimbursement Card Rebate: Amazon Prime #> 9      revenue                       reimbursement      Card Rebate: Expedia #> 10     revenue supercharger_reward_to_app_credited       Supercharger Reward #> 11     revenue                 pay_checkout_reward               Pay Rewards #> 12     revenue           crypto_earn_interest_paid               Crypto Earn #> 13     revenue     crypto_earn_extra_interest_paid       Crypto Earn (Extra) #> 14     revenue               admin_wallet_credited       Adjustment (Credit) #> 15     revenue   rewards_platform_deposit_credited   Mission Rewards Deposit #> 16     revenue                    mco_stake_reward         CRO Stake Rewards #> 17        sell               crypto_viban_exchange                BTC -> CAD #> 18        sell               crypto_viban_exchange                ETH -> CAD #>                           revenue.type exchange               rate.source #> 1                                 <NA>      CDC                  exchange #> 2                                 <NA>      CDC                  exchange #> 3                                 <NA>      CDC                  exchange #> 4                            referrals      CDC exchange (USD conversion) #> 5                              rebates      CDC                  exchange #> 6                              rebates      CDC                  exchange #> 7                              rebates      CDC                  exchange #> 8                              rebates      CDC                  exchange #> 9                              rebates      CDC                  exchange #> 10 supercharger_reward_to_app_credited      CDC                  exchange #> 11                             rebates      CDC                  exchange #> 12                           interests      CDC                  exchange #> 13                           interests      CDC                  exchange #> 14                               forks      CDC                  exchange #> 15                             rewards      CDC                  exchange #> 16                           interests      CDC                  exchange #> 17                                <NA>      CDC                  exchange #> 18                                <NA>      CDC                  exchange"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_exchange_rewards.html","id":null,"dir":"Reference","previous_headings":"","what":"Format CDC exchange file (FOR REWARDS ONLY) — format_CDC_exchange_rewards","title":"Format CDC exchange file (FOR REWARDS ONLY) — format_CDC_exchange_rewards","text":"Format .csv transaction history file Crypto.com exchange later ACB processing. processes rewards withdrawal fees, trades (see format_CDC_exchange_trades ). download rewards/withdrawal fees data Crypto.com exchange CSV file, copy paste code save bookmark browser. javascript:(function(){function callback(){window.cdc()}var s=document.createElement(\"script\");s.src=\"https://cdn.jsdelivr.net/gh/ConorIA/cdc-csv@master/cdc.js\";(s.addEventListener){s.addEventListener(\"load\",callback,false)}else (s.readyState){s.onreadystatechange=callback}document.body.appendChild(s);})() log crypto.com exchange click bookmark saved. automatically download CSV contains Supercharger rewards, withdrawal fees, CRO staking interest (exchange stake), among others. Note code include initial referral reward CRO signup Crypto.com exchange. must added manually. WARNING: DOWNLOAD TRADES, REWARDS, REWARDS WITHDRAWALS!","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_exchange_rewards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format CDC exchange file (FOR REWARDS ONLY) — format_CDC_exchange_rewards","text":"","code":"format_CDC_exchange_rewards(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_exchange_rewards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format CDC exchange file (FOR REWARDS ONLY) — format_CDC_exchange_rewards","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_exchange_rewards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format CDC exchange file (FOR REWARDS ONLY) — format_CDC_exchange_rewards","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_exchange_rewards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format CDC exchange file (FOR REWARDS ONLY) — format_CDC_exchange_rewards","text":"","code":"format_CDC_exchange_rewards(data_CDC_exchange_rewards) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                   date currency   quantity  total.price    spot.rate #> 1  2021-02-19 00:00:00      CRO 1.36512341 0.1916239832 1.403712e-01 #> 2  2021-02-21 00:00:00      CRO 1.36945123 0.2387766094 1.743593e-01 #> 3  2021-04-15 16:04:21      BTC 0.00000023 0.0182398297 7.930361e+04 #> 4  2021-04-18 00:00:00      CRO 1.36512310 0.4055452239 2.970759e-01 #> 5  2021-05-14 06:02:22      BTC 0.00000035 0.0211411589 6.040331e+04 #> 6  2021-06-12 15:21:34      BTC 0.00000630 0.2827357248 4.487869e+04 #> 7  2021-06-27 01:34:00      CRO 0.00100000 0.0001169498 1.169498e-01 #> 8  2021-07-07 00:00:00      CRO 0.01512903 0.0022388014 1.479805e-01 #> 9  2021-07-13 00:00:00      CRO 0.05351230 0.0085128641 1.590824e-01 #> 10 2021-09-07 00:00:00      CRO 0.01521310 0.0037135961 2.441052e-01 #>    transaction description                                          comment #> 1      revenue      Reward Interest on 5000.00000000 at 10% APR (Completed) #> 2      revenue      Reward Interest on 5000.00000000 at 10% APR (Completed) #> 3      revenue      Reward                          BTC Supercharger reward #> 4      revenue      Reward Interest on 5000.00000000 at 10% APR (Completed) #> 5      revenue      Reward                          BTC Supercharger reward #> 6      revenue      Reward                          BTC Supercharger reward #> 7         sell  Withdrawal                                             <NA> #> 8      revenue      Reward                  Rebate on 0.18512341 CRO at 10% #> 9      revenue      Reward                Rebate on 0.5231512346 CRO at 10% #> 10     revenue      Reward                 Rebate on 0.155125123 CRO at 10% #>    revenue.type     exchange   rate.source #> 1     interests CDC.exchange coinmarketcap #> 2     interests CDC.exchange coinmarketcap #> 3     interests CDC.exchange coinmarketcap #> 4     interests CDC.exchange coinmarketcap #> 5     interests CDC.exchange coinmarketcap #> 6     interests CDC.exchange coinmarketcap #> 7          <NA> CDC.exchange coinmarketcap #> 8       rebates CDC.exchange coinmarketcap #> 9       rebates CDC.exchange coinmarketcap #> 10      rebates CDC.exchange coinmarketcap"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_exchange_trades.html","id":null,"dir":"Reference","previous_headings":"","what":"Format CDC exchange file (FOR TRADES ONLY) — format_CDC_exchange_trades","title":"Format CDC exchange file (FOR TRADES ONLY) — format_CDC_exchange_trades","text":"Format .csv transaction history file Crypto.com exchange later ACB processing. processes trades, rewards (see format_CDC_exchange_rewards ).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_exchange_trades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format CDC exchange file (FOR TRADES ONLY) — format_CDC_exchange_trades","text":"","code":"format_CDC_exchange_trades(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_exchange_trades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format CDC exchange file (FOR TRADES ONLY) — format_CDC_exchange_trades","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_exchange_trades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format CDC exchange file (FOR TRADES ONLY) — format_CDC_exchange_trades","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_exchange_trades.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format CDC exchange file (FOR TRADES ONLY) — format_CDC_exchange_trades","text":"Original file name right file exchange called \"SPOT_TRADE.csv\", make sure right one. can usually accessed following steps: (1) connect CDC exchange. left menu, click \"Wallet\", choose \"Transactions\" tab. Pick desired dates. Unfortunately, CDC exchange history export supports 30 days time. , need export file merge manually use function. new changes exchange (3.0) transactions November 1st, 2022, one can go instead \"Archive\" button left vertical menu, choose dates (max 100 days), download trade transactions. zip file several transaction files inside. Choose \"SPOT_TRADE.csv\". newer versions transaction history file, CDC added three disclaimer character lines top file, messing headers. Thus, reading file read.csv(), add argument skip = 3. able read file normally.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_exchange_trades.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format CDC exchange file (FOR TRADES ONLY) — format_CDC_exchange_trades","text":"","code":"format_CDC_exchange_trades(data_CDC_exchange_trades) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                   date currency   quantity total.price    spot.rate transaction #> 1  2021-12-24 15:34:45      CRO 13260.1300  9640.58151    0.7270352         buy #> 2  2021-12-24 15:34:45      ETH     2.0932  9640.58151 4605.6666885        sell #> 3  2021-12-24 15:34:45      CRO  3555.9000  2585.26453    0.7270352         buy #> 4  2021-12-24 15:34:45      ETH     0.5600  2585.26453 4616.5438100        sell #> 5  2021-12-24 15:34:45      CRO  1781.7400  1295.38773    0.7270352         buy #> 6  2021-12-24 15:34:45      ETH     0.2800  1295.38773 4626.3847510        sell #> 7  2021-12-24 15:34:45      CRO    26.8500    19.52090    0.7270352         buy #> 8  2021-12-24 15:34:45      ETH     0.0042    19.52090 4647.8322900        sell #> 9  2021-12-24 15:34:45      CRO    26.6700    19.39003    0.7270352         buy #> 10 2021-12-24 15:34:45      ETH     0.0042    19.39003 4616.6736378        sell #> 11 2021-12-24 15:34:45      CRO    17.7800    12.92669    0.7270352         buy #> 12 2021-12-24 15:34:45      CRO    17.7800    12.92669    0.7270352         buy #> 13 2021-12-24 15:34:45      ETH     0.0028    12.92669 4616.6736378        sell #> 14 2021-12-24 15:34:45      ETH     0.0028    12.92669 4616.6736378        sell #>           fees description comment     exchange               rate.source #> 1           NA         BUY ETH_CRO CDC.exchange             coinmarketcap #> 2  38.56232942        SELL ETH_CRO CDC.exchange coinmarketcap (buy price) #> 3           NA         BUY ETH_CRO CDC.exchange             coinmarketcap #> 4  10.34105581        SELL ETH_CRO CDC.exchange coinmarketcap (buy price) #> 5           NA         BUY ETH_CRO CDC.exchange             coinmarketcap #> 6   5.18156139        SELL ETH_CRO CDC.exchange coinmarketcap (buy price) #> 7           NA         BUY ETH_CRO CDC.exchange             coinmarketcap #> 8   0.07809365        SELL ETH_CRO CDC.exchange coinmarketcap (buy price) #> 9           NA         BUY ETH_CRO CDC.exchange             coinmarketcap #> 10  0.07755694        SELL ETH_CRO CDC.exchange coinmarketcap (buy price) #> 11          NA         BUY ETH_CRO CDC.exchange             coinmarketcap #> 12          NA         BUY ETH_CRO CDC.exchange             coinmarketcap #> 13  0.05170544        SELL ETH_CRO CDC.exchange coinmarketcap (buy price) #> 14  0.05170536        SELL ETH_CRO CDC.exchange coinmarketcap (buy price)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_wallet.html","id":null,"dir":"Reference","previous_headings":"","what":"Format CDC wallet file — format_CDC_wallet","title":"Format CDC wallet file — format_CDC_wallet","text":"Format .csv transaction history file Crypto.com DeFi wallet later ACB processing. One way download CRO staking rewards data blockchain visit http://crypto.barkisoft.de/ input CRO address. Keep default export option (\"Koinly\"). output CSV file transactions. Note: site use secure connection: use risks. file semi-column separated; using read.csv, add sep = \";\" argument.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_wallet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format CDC wallet file — format_CDC_wallet","text":"","code":"format_CDC_wallet(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_wallet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format CDC wallet file — format_CDC_wallet","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_wallet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format CDC wallet file — format_CDC_wallet","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_CDC_wallet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format CDC wallet file — format_CDC_wallet","text":"","code":"format_CDC_wallet(data_CDC_wallet) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                  date currency quantity  total.price spot.rate transaction #> 1 2021-04-12 18:28:50      CRO 0.512510 1.376941e-01 0.2686663     revenue #> 2 2021-04-18 18:28:50      CRO 0.000200 5.941519e-05 0.2970759        sell #> 3 2021-04-23 18:51:53      CRO 1.656708 3.814478e-01 0.2302445     revenue #> 4 2021-04-25 18:51:53      CRO 0.000200 4.224724e-05 0.2112362        sell #> 5 2021-05-21 01:19:01      CRO 0.000200 3.001989e-05 0.1500995        sell #> 6 2021-06-25 04:11:53      CRO 0.000200 2.430626e-05 0.1215313        sell #> 7 2021-06-26 14:51:02      CRO 6.051235 7.290182e-01 0.1204743     revenue #>    description #> 1       Reward #> 2 staking cost #> 3       Reward #> 4 staking cost #> 5   Withdrawal #> 6 staking cost #> 7       Reward #>                                                                                                     comment #> 1                                                                                Auto Withdraw Reward from  #> 2                                                            Stake on Validator(abcdefghijklmnopqrstuvwxyz) #> 3                                                                                Auto Withdraw Reward from  #> 4                                                        Unstake from Validator(abcdefghijklmnopqrstuvwxyz) #> 5                                                        Outgoing Transaction to abcdefghijklmnopqrstuvwxyz #> 6 Move 530.41289045 CRO from Validator(abcdefghijklmnopqrstuvwxyz) to Validator(abcdefghijklmnopqrstuvwxyz) #> 7                                                           Withdraw Reward from abcdefghijklmnopqrstuvwxyz #>   revenue.type   exchange   rate.source #> 1      staking CDC.wallet coinmarketcap #> 2         <NA> CDC.wallet coinmarketcap #> 3      staking CDC.wallet coinmarketcap #> 4         <NA> CDC.wallet coinmarketcap #> 5         <NA> CDC.wallet coinmarketcap #> 6         <NA> CDC.wallet coinmarketcap #> 7      staking CDC.wallet coinmarketcap"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_adalite.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Adalite wallet file — format_adalite","title":"Format Adalite wallet file — format_adalite","text":"Format .csv transaction history file Adalite wallet later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_adalite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Adalite wallet file — format_adalite","text":"","code":"format_adalite(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_adalite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Adalite wallet file — format_adalite","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_adalite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Adalite wallet file — format_adalite","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_adalite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Adalite wallet file — format_adalite","text":"","code":"data <- data_adalite format_adalite(data) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                  date currency  quantity total.price spot.rate transaction #> 1 2021-04-28 16:56:00      ADA 0.3120400   0.4923403  1.577811     revenue #> 2 2021-05-07 16:53:00      ADA 0.3125132   0.5967795  1.909614     revenue #> 3 2021-05-12 16:56:00      ADA 0.2212410   0.4557332  2.059895     revenue #> 4 2021-05-17 17:16:00      ADA 0.4123210   1.1187530  2.713306     revenue #> 5 2021-05-17 21:16:00      ADA 0.1691870   0.4590561  2.713306        sell #> 6 2021-05-17 21:31:00      ADA 0.1912300   0.5188655  2.713306        sell #>      description        comment revenue.type exchange   rate.source #> 1 Reward awarded           <NA>      staking  adalite coinmarketcap #> 2 Reward awarded           <NA>      staking  adalite coinmarketcap #> 3 Reward awarded           <NA>      staking  adalite coinmarketcap #> 4 Reward awarded           <NA>      staking  adalite coinmarketcap #> 5           Sent Withdrawal Fee         <NA>  adalite coinmarketcap #> 6           Sent Withdrawal Fee         <NA>  adalite coinmarketcap"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Binance earn file — format_binance","title":"Format Binance earn file — format_binance","text":"Format .csv earn history file Binance later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Binance earn file — format_binance","text":"","code":"format_binance(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Binance earn file — format_binance","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Binance earn file — format_binance","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format Binance earn file — format_binance","text":"get file. Download overall transaction report (include trades, rewards, & \"Referral Kickback\" rewards). get file, connect Binance account desktop, click \"Wallet\" (top right), \"Transaction History\", top-right, \"Generate statements\". \"Time\", choose \"Customized\" pick time frame. Warning: process WITHDRAWALS (see format_binance_withdrawals() function purpose).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Binance earn file — format_binance","text":"","code":"# \\donttest{ format_binance(data_binance) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                   date currency   quantity  total.price   spot.rate transaction #> 1  2021-05-29 17:07:20      LTC 2.53200000 5.676524e+02  224.191313         buy #> 2  2021-05-29 17:07:20      ETH 0.19521000 5.676524e+02 2907.906384        sell #> 3  2021-05-29 17:07:20      LTC 2.41210000 5.407719e+02  224.191313         buy #> 4  2021-05-29 17:07:20      ETH 0.14123140 5.407719e+02 3828.977598        sell #> 5  2021-05-29 17:07:20      LTC 1.45120000 3.253464e+02  224.191313         buy #> 6  2021-05-29 17:07:20      ETH 0.11240000 3.253464e+02 2894.541226        sell #> 7  2021-05-29 17:07:20      LTC 1.42100000 3.185759e+02  224.191313         buy #> 8  2021-05-29 17:07:20      ETH 0.10512900 3.185759e+02 3030.332793        sell #> 9  2021-05-29 17:07:20      LTC 0.30000000 6.725739e+01  224.191313         buy #> 10 2021-05-29 17:07:20      ETH 0.00899120 6.725739e+01 7480.357904        sell #> 11 2021-05-29 17:07:20      LTC 0.27000000 6.053165e+01  224.191313         buy #> 12 2021-05-29 17:07:20      ETH 0.00612410 6.053165e+01 9884.171484        sell #> 13 2021-05-29 17:07:20      LTC 0.00202500 4.539874e-01  224.191313     revenue #> 14 2021-05-29 17:07:20      LTC 0.00127520 2.858888e-01  224.191313     revenue #> 15 2021-05-29 17:07:20      LTC 0.00113100 2.535604e-01  224.191313     revenue #> 16 2021-05-29 17:07:20      LTC 0.00049230 1.103694e-01  224.191313     revenue #> 17 2021-05-29 17:07:20      LTC 0.00007000 1.569339e-02  224.191313     revenue #> 18 2021-05-29 17:07:20      LTC 0.00005000 1.120957e-02  224.191313     revenue #> 19 2021-05-29 18:12:55      ETH 0.44124211 1.375327e+03 3116.943792         buy #> 20 2021-05-29 18:12:55      LTC 1.60000000 1.375327e+03  859.579285        sell #> 21 2021-05-29 18:12:55      ETH 0.42124000 1.312981e+03 3116.943792         buy #> 22 2021-05-29 18:12:55      LTC 1.23000000 1.312981e+03 1067.464555        sell #> 23 2021-05-29 18:12:55      ETH 0.00021470 6.692078e-01 3116.943792     revenue #> 24 2021-05-29 18:12:55      ETH 0.00009251 2.883485e-01 3116.943792     revenue #> 25 2021-11-05 04:32:23     BUSD 0.10512330 1.305652e-01    1.242019     revenue #> 26 2022-11-17 11:54:25     ETHW 0.00012050 6.168112e-04    5.118765     revenue #> 27 2022-11-27 08:05:35     BUSD 5.77124200 7.734143e+00    1.340118         buy #> 28 2022-11-27 08:05:35     USDC 5.77124200 7.732485e+00    1.339830        sell #>          fees                   description comment revenue.type exchange #> 1  1.66372374                           Buy    Spot         <NA>  binance #> 2          NA                           Buy    Spot         <NA>  binance #> 3  1.30299991                           Buy    Spot         <NA>  binance #> 4          NA                           Buy    Spot         <NA>  binance #> 5  1.21534111                           Buy    Spot         <NA>  binance #> 6          NA                           Buy    Spot         <NA>  binance #> 7  0.70014947                           Buy    Spot         <NA>  binance #> 8          NA                           Buy    Spot         <NA>  binance #> 9  0.06725739                           Buy    Spot         <NA>  binance #> 10         NA                           Buy    Spot         <NA>  binance #> 11 0.04708018                           Buy    Spot         <NA>  binance #> 12         NA                           Buy    Spot         <NA>  binance #> 13         NA             Referral Kickback    Spot      rebates  binance #> 14         NA             Referral Kickback    Spot      rebates  binance #> 15         NA             Referral Kickback    Spot      rebates  binance #> 16         NA             Referral Kickback    Spot      rebates  binance #> 17         NA             Referral Kickback    Spot      rebates  binance #> 18         NA             Referral Kickback    Spot      rebates  binance #> 19 6.61765817                          Sell    Spot         <NA>  binance #> 20         NA                          Sell    Spot         <NA>  binance #> 21 1.90881638                          Sell    Spot         <NA>  binance #> 22         NA                          Sell    Spot         <NA>  binance #> 23         NA             Referral Kickback    Spot      rebates  binance #> 24         NA             Referral Kickback    Spot      rebates  binance #> 25         NA Simple Earn Flexible Interest    Earn    interests  binance #> 26         NA                  Distribution    Spot        forks  binance #> 27         NA   Stablecoins Auto-Conversion    Spot         <NA>  binance #> 28         NA   Stablecoins Auto-Conversion    Spot         <NA>  binance #>                  rate.source #> 1              coinmarketcap #> 2  coinmarketcap (buy price) #> 3              coinmarketcap #> 4  coinmarketcap (buy price) #> 5              coinmarketcap #> 6  coinmarketcap (buy price) #> 7              coinmarketcap #> 8  coinmarketcap (buy price) #> 9              coinmarketcap #> 10 coinmarketcap (buy price) #> 11             coinmarketcap #> 12 coinmarketcap (buy price) #> 13             coinmarketcap #> 14             coinmarketcap #> 15             coinmarketcap #> 16             coinmarketcap #> 17             coinmarketcap #> 18             coinmarketcap #> 19             coinmarketcap #> 20 coinmarketcap (buy price) #> 21             coinmarketcap #> 22 coinmarketcap (buy price) #> 23             coinmarketcap #> 24             coinmarketcap #> 25             coinmarketcap #> 26             coinmarketcap #> 27             coinmarketcap #> 28             coinmarketcap # }"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance_withdrawals.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Binance withdrawal file — format_binance_withdrawals","title":"Format Binance withdrawal file — format_binance_withdrawals","text":"Format .xlsx withdrawal history file Binance later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance_withdrawals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Binance withdrawal file — format_binance_withdrawals","text":"","code":"format_binance_withdrawals(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance_withdrawals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Binance withdrawal file — format_binance_withdrawals","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance_withdrawals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Binance withdrawal file — format_binance_withdrawals","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance_withdrawals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format Binance withdrawal file — format_binance_withdrawals","text":"get file, connect Binance account desktop, click \"Wallet\" (top right), \"Transaction History\", \"Type\" column, choose \"Withdraw\". Next, click \"Export Withdrawal History\" right choose time frame (probably need choose \"Customized\"). allowed choose 3 months, might download one file merge using function. Warning: process TRADES See format_binance_trades() function purpose.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_binance_withdrawals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Binance withdrawal file — format_binance_withdrawals","text":"","code":"format_binance_withdrawals(data_binance_withdrawals) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                  date currency quantity total.price spot.rate transaction #> 1 2021-04-28 17:13:50      LTC  1.0e-03   0.3145237  314.5237        sell #> 2 2021-04-28 18:15:14      ETH  7.1e-05   0.2287972 3222.4952        sell #> 3 2021-05-06 19:55:52      ETH  6.2e-05   0.2575114 4153.4101        sell #>       description exchange   rate.source #> 1 Withdrawal fees  binance coinmarketcap #> 2 Withdrawal fees  binance coinmarketcap #> 3 Withdrawal fees  binance coinmarketcap"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_blockfi.html","id":null,"dir":"Reference","previous_headings":"","what":"Format BlockFi file — format_blockfi","title":"Format BlockFi file — format_blockfi","text":"Format .csv transaction history file BlockFi later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_blockfi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format BlockFi file — format_blockfi","text":"","code":"format_blockfi(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_blockfi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format BlockFi file — format_blockfi","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_blockfi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format BlockFi file — format_blockfi","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_blockfi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format BlockFi file — format_blockfi","text":"","code":"format_blockfi(data_blockfi) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                   date currency     quantity total.price    spot.rate #> 1  2021-05-29 21:43:44      LTC  0.022451200  5.03336401   224.191313 #> 2  2021-05-29 21:43:44      BTC  0.000018512  0.82940367 44803.568946 #> 3  2021-06-13 21:43:44      BTC  0.000184120  8.15721460 44303.794280 #> 4  2021-06-30 21:43:44      BTC  0.000047234  2.05439211 43493.926218 #> 5  2021-06-30 21:43:44      LTC  0.010125120  1.76117412   173.941061 #> 6  2021-07-29 21:43:44     USDC  0.038241000  0.04801144     1.255497 #> 7  2021-08-05 18:34:06      BTC  0.000250000 12.21999371 48879.974846 #> 8  2021-08-07 21:43:44      BTC  0.000441230 23.13158646 52425.235044 #> 9  2021-10-24 04:29:23     USDC 55.000000000 68.05763407     1.237412 #> 10 2021-10-24 04:29:23      LTC  0.165122140 68.05763407   412.165407 #>    transaction      description revenue.type exchange               rate.source #> 1      revenue Interest Payment    interests  blockfi             coinmarketcap #> 2      revenue Interest Payment    interests  blockfi             coinmarketcap #> 3      revenue   Referral Bonus    referrals  blockfi             coinmarketcap #> 4      revenue Interest Payment    interests  blockfi             coinmarketcap #> 5      revenue Interest Payment    interests  blockfi             coinmarketcap #> 6      revenue Interest Payment    interests  blockfi             coinmarketcap #> 7         sell   Withdrawal Fee         <NA>  blockfi             coinmarketcap #> 8      revenue    Bonus Payment       promos  blockfi             coinmarketcap #> 9          buy            Trade         <NA>  blockfi             coinmarketcap #> 10        sell            Trade         <NA>  blockfi coinmarketcap (buy price)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_celsius.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Celsius file — format_celsius","title":"Format Celsius file — format_celsius","text":"Format .csv transaction history file Celsius later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_celsius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Celsius file — format_celsius","text":"","code":"format_celsius(data)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_celsius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Celsius file — format_celsius","text":"data dataframe","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_celsius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Celsius file — format_celsius","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_celsius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Celsius file — format_celsius","text":"","code":"format_celsius(data_celsius) #> Object 'USD2CAD.table' already exists. Reusing 'USD2CAD.table'. To force a fresh download, use argument 'force = TRUE'. #>                  date currency     quantity total.price  spot.rate transaction #> 1 2021-03-03 21:11:00      BTC 7.075989e-04  50.5531290  71443.197     revenue #> 2 2021-03-07 05:00:00      BTC 2.523788e-05   0.1365091   5408.897     revenue #> 3 2021-03-19 05:00:00      BTC 8.156121e-05   0.7217231   8848.852     revenue #> 4 2021-03-28 05:00:00      BTC 3.683063e-06   0.5992261 162697.766     revenue #> 5 2021-04-05 05:00:00      BTC 4.694039e-05   0.5879116  12524.643     revenue #> 6 2021-04-08 05:00:00      BTC 5.177562e-05   0.6458988  12474.960     revenue #> 7 2021-04-08 22:18:00      BTC 7.330825e-04  50.4026826  68754.453     revenue #> 8 2021-05-06 10:32:00      BTC 1.409023e-03  61.4197063  43590.266     revenue #> 9 2021-05-23 05:00:00      BTC 6.372669e-05   0.4165345   6536.264     revenue #>         description revenue.type exchange               rate.source #> 1 Promo Code Reward       promos  celsius exchange (USD conversion) #> 2            Reward    interests  celsius exchange (USD conversion) #> 3            Reward    interests  celsius exchange (USD conversion) #> 4            Reward    interests  celsius exchange (USD conversion) #> 5            Reward    interests  celsius exchange (USD conversion) #> 6            Reward    interests  celsius exchange (USD conversion) #> 7    Referred Award    referrals  celsius exchange (USD conversion) #> 8 Promo Code Reward       promos  celsius exchange (USD conversion) #> 9            Reward    interests  celsius exchange (USD conversion)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_coinbase.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Coinbase file — format_coinbase","title":"Format Coinbase file — format_coinbase","text":"Format .csv transaction history file Coinbase later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_coinbase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Coinbase file — format_coinbase","text":"","code":"format_coinbase(data)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_coinbase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Coinbase file — format_coinbase","text":"data dataframe","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_coinbase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Coinbase file — format_coinbase","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_coinbase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Coinbase file — format_coinbase","text":"","code":"format_coinbase(data_coinbase) #>                  date currency    quantity total.price    spot.rate transaction #> 1 2024-02-02 17:18:24      ETH  0.00844271       22.12 2.355250e+03     revenue #> 2 2024-02-02 17:18:24      BTC  0.00042515       28.62 4.722199e+04     revenue #> 3 2024-04-02 11:02:12      BTC  0.00042515       41.56 9.035295e+04        sell #> 4 2024-04-02 11:02:12      ADA 49.57464000       41.56 8.383319e-01         buy #> 5 2024-04-02 11:03:55      ETH  0.00844271       32.59 4.752220e+03        sell #> 6 2024-04-02 11:03:55      ADA 40.71252100       32.59 8.004908e-01         buy #> 7 2024-04-02 14:07:05      ADA  0.00000000        0.00 7.600000e-01        sell #>    fees                                                       comment #> 1  0.00 Received 0.00844271 ETH from Celsius Network LLC Crypto Di... #> 2  0.00 Received 0.00042515 BTC from Celsius Network LLC Crypto Di... #> 3  0.00                      Converted 0.00042515 BTC to 49.57464 ADA #> 4 12.14                      Converted 0.00042515 BTC to 49.57464 ADA #> 5  0.00                     Converted 0.00844271 ETH to 40.712521 ADA #> 6  9.52                     Converted 0.00844271 ETH to 40.712521 ADA #> 7  0.00              Sent 90.287162 ADA to abcdefghijklmnopqrstuvwxyz #>              revenue.type exchange rate.source #> 1 bankruptcy distribution Coinbase    exchange #> 2 bankruptcy distribution Coinbase    exchange #> 3                    <NA> Coinbase    exchange #> 4                    <NA> Coinbase    exchange #> 5                    <NA> Coinbase    exchange #> 6                    <NA> Coinbase    exchange #> 7                    <NA> Coinbase    exchange"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_coinsmart.html","id":null,"dir":"Reference","previous_headings":"","what":"Format CoinSmart file — format_coinsmart","title":"Format CoinSmart file — format_coinsmart","text":"Format .csv transaction history file CoinSmart later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_coinsmart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format CoinSmart file — format_coinsmart","text":"","code":"format_coinsmart(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_coinsmart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format CoinSmart file — format_coinsmart","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_coinsmart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format CoinSmart file — format_coinsmart","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_coinsmart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format CoinSmart file — format_coinsmart","text":"","code":"format_coinsmart(data_coinsmart) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                  date currency  quantity total.price    spot.rate transaction #> 1 2021-04-25 16:11:24      ADA 198.50000 237.9374300     1.198677         buy #> 2 2021-04-28 18:37:15      CAD  15.00000  15.0000000     1.000000     revenue #> 3 2021-05-15 16:42:07      BTC   0.00004   2.4175248 60438.119096     revenue #> 4 2021-06-03 02:04:49      ADA   0.30000   0.6308336     2.102779        sell #>        fees description  comment revenue.type  exchange   rate.source #> 1 0.2777396    purchase    Trade         <NA> coinsmart      exchange #> 2        NA       Other Referral    referrals coinsmart      exchange #> 3        NA       Other     Quiz     airdrops coinsmart coinmarketcap #> 4        NA         Fee Withdraw         <NA> coinsmart coinmarketcap"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_detect.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect transaction file exchange and format it — format_detect","title":"Detect transaction file exchange and format it — format_detect","text":"Detect exchange given transaction file format proper function later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_detect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect transaction file exchange and format it — format_detect","text":"","code":"format_detect(data, ...)  # S3 method for data.frame format_detect(data, list.prices = NULL, force = FALSE, ...)  # S3 method for list format_detect(data, list.prices = NULL, force = FALSE, ...)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_detect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect transaction file exchange and format it — format_detect","text":"data dataframe ... Used methods. list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_detect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect transaction file exchange and format it — format_detect","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_detect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect transaction file exchange and format it — format_detect","text":"","code":"format_detect(data_shakepay) #> Exchange detected: shakepay #>                  date currency    quantity total.price spot.rate transaction #> 1 2021-05-07 14:50:41      BTC  0.00103982   53.033350  51002.43         buy #> 2 2021-05-07 21:25:36      CAD 30.00000000   30.000000      1.00     revenue #> 3 2021-05-08 12:12:57      BTC  0.00011000    5.784024  52582.03     revenue #> 4 2021-05-09 12:22:07      BTC  0.00012000    6.034441  50287.01     revenue #> 5 2021-05-21 12:47:14      BTC  0.00013000    7.348590  56527.62     revenue #> 6 2021-06-11 12:03:31      BTC  0.00014000    8.396927  59978.05     revenue #> 7 2021-06-23 12:21:49      BTC  0.00015000    8.714877  58099.18     revenue #> 8 2021-07-10 00:52:19      BTC  0.00052991   31.268480  59007.15        sell #>     description  comment revenue.type exchange rate.source #> 1 purchase/sale purchase         <NA> shakepay    exchange #> 2         other   credit    referrals shakepay    exchange #> 3   shakingsats   credit     airdrops shakepay    exchange #> 4   shakingsats   credit     airdrops shakepay    exchange #> 5   shakingsats   credit     airdrops shakepay    exchange #> 6   shakingsats   credit     airdrops shakepay    exchange #> 7   shakingsats   credit     airdrops shakepay    exchange #> 8 purchase/sale     sale         <NA> shakepay    exchange format_detect(data_newton) #> Exchange detected: newton #>                  date currency   quantity  total.price  spot.rate transaction #> 1 2021-04-04 22:50:12      LTC  0.1048291   23.4912731   224.0911         buy #> 2 2021-04-04 22:53:46      CAD 25.0000000   25.0000000     1.0000     revenue #> 3 2021-04-04 22:55:55      ETH  2.7198712 3423.8221510  1258.8178         buy #> 4 2021-04-21 19:57:26      BTC  0.0034300  153.1241354 44642.6051         buy #> 5 2021-05-12 21:37:42      BTC  0.0000040    0.3049013 76225.3175         buy #> 6 2021-05-12 21:52:40      BTC  0.0032130  156.1241341 48591.3894        sell #> 7 2021-06-16 18:49:11      CAD 25.0000000   25.0000000     1.0000     revenue #>        description revenue.type exchange rate.source #> 1            TRADE         <NA>   newton    exchange #> 2 Referral Program    referrals   newton    exchange #> 3            TRADE         <NA>   newton    exchange #> 4            TRADE         <NA>   newton    exchange #> 5            TRADE         <NA>   newton    exchange #> 6            TRADE         <NA>   newton    exchange #> 7 Referral Program    referrals   newton    exchange format_detect(list(data_shakepay, data_newton)) #> Exchange detected: shakepay #> Exchange detected: newton #>                   date currency    quantity  total.price  spot.rate transaction #> 1  2021-04-04 22:50:12      LTC  0.10482910   23.4912731   224.0911         buy #> 2  2021-04-04 22:53:46      CAD 25.00000000   25.0000000     1.0000     revenue #> 3  2021-04-04 22:55:55      ETH  2.71987120 3423.8221510  1258.8178         buy #> 4  2021-04-21 19:57:26      BTC  0.00343000  153.1241354 44642.6051         buy #> 5  2021-05-07 14:50:41      BTC  0.00103982   53.0333500 51002.4331         buy #> 6  2021-05-07 21:25:36      CAD 30.00000000   30.0000000     1.0000     revenue #> 7  2021-05-08 12:12:57      BTC  0.00011000    5.7840236 52582.0324     revenue #> 8  2021-05-09 12:22:07      BTC  0.00012000    6.0344409 50287.0079     revenue #> 9  2021-05-12 21:37:42      BTC  0.00000400    0.3049013 76225.3175         buy #> 10 2021-05-12 21:52:40      BTC  0.00321300  156.1241341 48591.3894        sell #> 11 2021-05-21 12:47:14      BTC  0.00013000    7.3485904 56527.6188     revenue #> 12 2021-06-11 12:03:31      BTC  0.00014000    8.3969267 59978.0477     revenue #> 13 2021-06-16 18:49:11      CAD 25.00000000   25.0000000     1.0000     revenue #> 14 2021-06-23 12:21:49      BTC  0.00015000    8.7148765 58099.1770     revenue #> 15 2021-07-10 00:52:19      BTC  0.00052991   31.2684800 59007.1522        sell #>         description  comment revenue.type exchange rate.source #> 1             TRADE     <NA>         <NA>   newton    exchange #> 2  Referral Program     <NA>    referrals   newton    exchange #> 3             TRADE     <NA>         <NA>   newton    exchange #> 4             TRADE     <NA>         <NA>   newton    exchange #> 5     purchase/sale purchase         <NA> shakepay    exchange #> 6             other   credit    referrals shakepay    exchange #> 7       shakingsats   credit     airdrops shakepay    exchange #> 8       shakingsats   credit     airdrops shakepay    exchange #> 9             TRADE     <NA>         <NA>   newton    exchange #> 10            TRADE     <NA>         <NA>   newton    exchange #> 11      shakingsats   credit     airdrops shakepay    exchange #> 12      shakingsats   credit     airdrops shakepay    exchange #> 13 Referral Program     <NA>    referrals   newton    exchange #> 14      shakingsats   credit     airdrops shakepay    exchange #> 15    purchase/sale     sale         <NA> shakepay    exchange"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_dollars.html","id":null,"dir":"Reference","previous_headings":"","what":"Format numeric values to dollars — format_dollars","title":"Format numeric values to dollars — format_dollars","text":"Format numeric values comma thousands separator. Can converted back format numeric using = \"numeric\".","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_dollars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format numeric values to dollars — format_dollars","text":"","code":"format_dollars(x, to = \"character\")"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_dollars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format numeric values to dollars — format_dollars","text":"x formatted.ACB file convert , otions c(\"character\", \"numeric\").","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_dollars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format numeric values to dollars — format_dollars","text":"value representing dollars, either formatted character string numeric value.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_dollars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format numeric values to dollars — format_dollars","text":"","code":"x <- format_dollars(1010.92) x #> [1] \"1,010.92\" format_dollars(x, to = \"numeric\") #> [1] 1010.92"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_exodus.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Exodus wallet file — format_exodus","title":"Format Exodus wallet file — format_exodus","text":"Format .csv transaction history file Exodus wallet later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_exodus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Exodus wallet file — format_exodus","text":"","code":"format_exodus(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_exodus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Exodus wallet file — format_exodus","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_exodus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Exodus wallet file — format_exodus","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_exodus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Exodus wallet file — format_exodus","text":"","code":"# \\donttest{ format_exodus(data_exodus) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                  date currency  quantity total.price    spot.rate transaction #> 1 2021-05-25 22:06:11      LTC 0.0014430   0.2843553   197.058392        sell #> 2 2021-05-25 23:08:12      ADA 0.1782410   0.3080132     1.728071        sell #> 3 2021-06-12 12:15:28      BTC 0.0000503   2.2573979 44878.686479        sell #> 4 2021-06-12 22:31:35      ETH 0.0014500   4.2422640  2925.699291        sell #>   description revenue.type exchange   rate.source #> 1  withdrawal         <NA>   exodus coinmarketcap #> 2  withdrawal         <NA>   exodus coinmarketcap #> 3  withdrawal         <NA>   exodus coinmarketcap #> 4  withdrawal         <NA>   exodus coinmarketcap # }"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_gemini.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Gemini file — format_gemini","title":"Format Gemini file — format_gemini","text":"Format .csv transaction history file Gemini later ACB processing. Open xlsx data file using readxl::read_excel().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_gemini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Gemini file — format_gemini","text":"","code":"format_gemini(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_gemini.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Gemini file — format_gemini","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_gemini.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Gemini file — format_gemini","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_gemini.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Gemini file — format_gemini","text":"","code":"format_gemini(data_gemini) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                   date currency     quantity total.price    spot.rate #> 1  2021-04-09 22:50:55      BTC 9.662784e-04  69.5935550 72022.264190 #> 2  2021-04-09 22:50:55      LTC 2.466906e-01  69.5935550   282.108663 #> 3  2021-04-09 22:53:57      BTC 6.051912e-06   0.4358724 72022.264190 #> 4  2021-04-09 22:53:57      LTC 1.640820e-03   0.4358724   265.643013 #> 5  2021-04-09 23:20:53      BAT 4.871952e+01  76.0791290     1.561574 #> 6  2021-04-09 23:20:53      BTC 9.507300e-04  76.0791290 80021.801997 #> 7  2021-04-10 23:22:04      BTC 2.850256e-04  20.8430114 73126.810459 #> 8  2021-05-08 16:14:54      BAT 2.833935e+00   4.8394522     1.707679 #> 9  2021-05-16 12:55:02      BAT 3.085288e+00   4.4036766     1.427314 #> 10 2021-05-16 13:35:19      BAT 5.007481e+00   7.1472506     1.427314 #> 11 2021-06-18 01:38:54      BAT 6.834323e+00   5.5394574     0.810535 #>    transaction         fees description               comment revenue.type #> 1          buy 2.303409e-06      LTCBTC                Market         <NA> #> 2         sell           NA      LTCBTC                Market         <NA> #> 3          buy 3.651810e-08      LTCBTC                 Limit         <NA> #> 4         sell           NA      LTCBTC                 Limit         <NA> #> 5          buy           NA      BATBTC                 Limit         <NA> #> 6         sell 1.814241e-06      BATBTC                 Limit         <NA> #> 7      revenue           NA      Credit Administrative Credit    referrals #> 8      revenue           NA      Credit Administrative Credit    referrals #> 9      revenue           NA      Credit               Deposit     airdrops #> 10     revenue           NA      Credit               Deposit     airdrops #> 11     revenue           NA      Credit               Deposit     airdrops #>    exchange               rate.source #> 1    gemini             coinmarketcap #> 2    gemini coinmarketcap (buy price) #> 3    gemini             coinmarketcap #> 4    gemini coinmarketcap (buy price) #> 5    gemini             coinmarketcap #> 6    gemini coinmarketcap (buy price) #> 7    gemini             coinmarketcap #> 8    gemini             coinmarketcap #> 9    gemini             coinmarketcap #> 10   gemini             coinmarketcap #> 11   gemini             coinmarketcap"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a generic transaction file — format_generic","title":"Format a generic transaction file — format_generic","text":"Format generic .csv transaction history file. function requires one transaction per row, work trades two coins reported row. split trade two rows single currency column per row.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a generic transaction file — format_generic","text":"","code":"format_generic(   data,   date = \"date\",   currency = \"currency\",   quantity = \"quantity\",   total.price = \"total.price\",   spot.rate = \"spot.rate\",   transaction = \"transaction\",   fees = \"fees\",   description = \"description\",   comment = \"comment\",   revenue.type = \"revenue.type\",   exchange = \"exchange\",   timezone = \"UTC\",   force = FALSE,   list.prices = NULL )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a generic transaction file — format_generic","text":"data dataframe date date column currency currency column quantity quantity column total.price total.price column, available spot.rate spot.rate column, available transaction transaction column fees fees column, available description description column, available comment comment column, available revenue.type revenue.type column, available (content can one c(\"airdrops\", \"referrals\", \"staking\", \"promos\", \"interests\", \"rebates\", \"rewards\", \"forks\", \"mining\")) exchange exchange column timezone time zone transactions force Whether force recreating list.prices even though already exists (e.g., added new coins new dates). list.prices list.prices object fetch coin prices.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_generic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a generic transaction file — format_generic","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_generic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a generic transaction file — format_generic","text":"","code":"# Detects correct names even with capitals format_generic(data_generic1) #>                  date currency quantity total.price  spot.rate transaction fees #> 1 2021-03-02 10:36:06      BTC 0.001240       50.99 41120.9677         buy 0.72 #> 2 2021-03-10 12:49:04      ETH 0.063067       50.99   808.5052         buy 0.72 #> 3 2021-03-15 14:12:08      ETH 0.065048      150.99  2321.2090        sell 1.75 #>           exchange rate.source #> 1 generic_exchange    exchange #> 2 generic_exchange    exchange #> 3 generic_exchange    exchange  # In other cases, names can be specified explicitly: format_generic(   data_generic2,   date = \"Date.Transaction\",   currency = \"Coin\",   quantity = \"Amount\",   total.price = \"Price\",   transaction = \"Type\",   fees = \"Fee\",   exchange = \"Platform\" ) #>                  date currency quantity total.price  spot.rate transaction fees #> 1 2021-03-02 10:36:06      BTC 0.001240       50.99 41120.9677         buy 0.72 #> 2 2021-03-10 12:49:04      ETH 0.063067       50.99   808.5052         buy 0.72 #> 3 2021-03-15 14:12:08      ETH 0.065048      150.99  2321.2090        sell 1.75 #>           exchange rate.source #> 1 generic_exchange    exchange #> 2 generic_exchange    exchange #> 3 generic_exchange    exchange  # If total.price is missing, it will calculate it based # on the spot.rate, if available format_generic(data_generic3) #>                  date currency quantity total.price  spot.rate transaction fees #> 1 2021-03-02 10:36:06      BTC 0.001240       50.99 41120.9677         buy 0.72 #> 2 2021-03-10 12:49:04      ETH 0.063067       50.99   808.5052         buy 0.72 #> 3 2021-03-15 14:12:08      ETH 0.065048      150.99  2321.2090        sell 1.75 #>           exchange #> 1 generic_exchange #> 2 generic_exchange #> 3 generic_exchange  # If both total.price and spot.rate are missing, it will # scrap the spot.rate from coinmarketcap based on the coin: format_generic(data_generic4) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                  date currency quantity total.price spot.rate transaction fees #> 1 2021-03-02 10:36:06      BTC 0.001240     74.4584 60047.097         buy 0.72 #> 2 2021-03-10 12:49:04      ETH 0.063067    147.7913  2343.401         buy 0.72 #> 3 2021-03-15 14:12:08      ETH 0.065048    153.2642  2356.170        sell 1.75 #>           exchange   rate.source #> 1 generic_exchange coinmarketcap #> 2 generic_exchange coinmarketcap #> 3 generic_exchange coinmarketcap"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_newton.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Newton file — format_newton","title":"Format Newton file — format_newton","text":"Format .csv transaction history file Newton later ACB processing. downloading Newton, please choose yearly reports format (\"CoinTracker Version\" \"Koinly Version\" supported time). multiple years, means might merge two datasets.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_newton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Newton file — format_newton","text":"","code":"format_newton(data, filetype = \"yearly\")"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_newton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Newton file — format_newton","text":"data dataframe filetype Newton file format use, one c(\"yearly\", \"cointracker\", \"koinly\"). \"yearly\" (default) supported time.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_newton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Newton file — format_newton","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_newton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Newton file — format_newton","text":"","code":"format_newton(data_newton) #>                  date currency   quantity  total.price  spot.rate transaction #> 1 2021-04-04 22:50:12      LTC  0.1048291   23.4912731   224.0911         buy #> 2 2021-04-04 22:53:46      CAD 25.0000000   25.0000000     1.0000     revenue #> 3 2021-04-04 22:55:55      ETH  2.7198712 3423.8221510  1258.8178         buy #> 4 2021-04-21 19:57:26      BTC  0.0034300  153.1241354 44642.6051         buy #> 5 2021-05-12 21:37:42      BTC  0.0000040    0.3049013 76225.3175         buy #> 6 2021-05-12 21:52:40      BTC  0.0032130  156.1241341 48591.3894        sell #> 7 2021-06-16 18:49:11      CAD 25.0000000   25.0000000     1.0000     revenue #>        description revenue.type exchange rate.source #> 1            TRADE         <NA>   newton    exchange #> 2 Referral Program    referrals   newton    exchange #> 3            TRADE         <NA>   newton    exchange #> 4            TRADE         <NA>   newton    exchange #> 5            TRADE         <NA>   newton    exchange #> 6            TRADE         <NA>   newton    exchange #> 7 Referral Program    referrals   newton    exchange"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_pooltool.html","id":null,"dir":"Reference","previous_headings":"","what":"Format ADA rewards from blockchain CSV — format_pooltool","title":"Format ADA rewards from blockchain CSV — format_pooltool","text":"Format .csv transaction history file Cardano PoolTool later ACB processing. Instructions: Use https://pooltool.io/ click \"rewards data taxes\", search ADA address, scroll bottom page, use export tool export transactions. Make sure use \"Generic(CSV)\" format.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_pooltool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format ADA rewards from blockchain CSV — format_pooltool","text":"","code":"format_pooltool(data)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_pooltool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format ADA rewards from blockchain CSV — format_pooltool","text":"data dataframe","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_pooltool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format ADA rewards from blockchain CSV — format_pooltool","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_pooltool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format ADA rewards from blockchain CSV — format_pooltool","text":"necessary e.g., used Exodus wallet report ADA rewards transaction history file.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_pooltool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format ADA rewards from blockchain CSV — format_pooltool","text":"","code":"format_pooltool(data_pooltool) #>                   date currency  quantity total.price spot.rate transaction #> 1  2021-04-22 22:03:22      ADA 1.0827498    1.974017      1.82     revenue #> 2  2021-04-27 22:22:14      ADA 0.8579850    1.565881      1.83     revenue #> 3  2021-05-02 22:03:54      ADA 1.0193882    1.979399      1.94     revenue #> 4  2021-05-07 22:54:38      ADA 1.0548971    1.790303      1.70     revenue #> 5  2021-05-12 22:12:49      ADA 0.9443321    1.514525      1.60     revenue #> 6  2021-05-17 22:47:25      ADA 1.0198183    1.426898      1.40     revenue #> 7  2021-05-23 03:43:38      ADA 1.1605830    1.806024      1.56     revenue #> 8  2021-05-27 22:07:57      ADA 1.0197753    1.589004      1.56     revenue #> 9  2021-06-01 22:13:58      ADA 0.8392135    1.538300      1.83     revenue #> 10 2021-06-06 22:14:11      ADA 1.1115378    2.072874      1.86     revenue #>    description     comment revenue.type exchange rate.source #> 1  epoch = 228 pool = REKT      staking   exodus    pooltool #> 2  epoch = 229 pool = REKT      staking   exodus    pooltool #> 3  epoch = 230 pool = REKT      staking   exodus    pooltool #> 4  epoch = 231 pool = REKT      staking   exodus    pooltool #> 5  epoch = 232 pool = REKT      staking   exodus    pooltool #> 6  epoch = 233 pool = REKT      staking   exodus    pooltool #> 7  epoch = 234 pool = REKT      staking   exodus    pooltool #> 8  epoch = 235 pool = REKT      staking   exodus    pooltool #> 9  epoch = 236 pool = REKT      staking   exodus    pooltool #> 10 epoch = 237 pool = REKT      staking   exodus    pooltool"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_presearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Presearch wallet file — format_presearch","title":"Format Presearch wallet file — format_presearch","text":"Format .csv transaction history file Presearch later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_presearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Presearch wallet file — format_presearch","text":"","code":"format_presearch(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_presearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Presearch wallet file — format_presearch","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_presearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Presearch wallet file — format_presearch","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_presearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Presearch wallet file — format_presearch","text":"","code":"format_presearch(data_presearch) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                   date currency quantity total.price  spot.rate transaction #> 1  2021-04-27 17:45:18      PRE     0.13  0.01177119 0.09054761     revenue #> 2  2021-04-27 17:48:00      PRE     0.13  0.01177119 0.09054761     revenue #> 3  2021-04-27 17:48:18      PRE     0.13  0.01177119 0.09054761     revenue #> 4  2021-04-27 17:55:24      PRE     0.13  0.01177119 0.09054761     revenue #> 5  2021-04-27 17:57:29      PRE     0.13  0.01177119 0.09054761     revenue #> 6  2021-04-27 19:00:31      PRE     0.13  0.01177119 0.09054761     revenue #> 7  2021-04-27 19:00:41      PRE     0.13  0.01177119 0.09054761     revenue #> 8  2021-04-27 19:01:57      PRE     0.13  0.01177119 0.09054761     revenue #> 9  2021-04-27 19:08:59      PRE     0.13  0.01177119 0.09054761     revenue #> 10 2021-04-27 19:12:15      PRE     0.13  0.01177119 0.09054761     revenue #> 11 2021-05-07 05:55:33      PRE  1000.00 85.58796651 0.08558797         buy #>                                        description revenue.type  exchange #> 1                                    Search Reward     airdrops presearch #> 2                                    Search Reward     airdrops presearch #> 3                                    Search Reward     airdrops presearch #> 4                                    Search Reward     airdrops presearch #> 5                                    Search Reward     airdrops presearch #> 6                                    Search Reward     airdrops presearch #> 7                                    Search Reward     airdrops presearch #> 8                                    Search Reward     airdrops presearch #> 9                                    Search Reward     airdrops presearch #> 10                                   Search Reward     airdrops presearch #> 11 Transferred from Presearch Portal (PO#: 412893)         <NA> presearch #>      rate.source #> 1  coinmarketcap #> 2  coinmarketcap #> 3  coinmarketcap #> 4  coinmarketcap #> 5  coinmarketcap #> 6  coinmarketcap #> 7  coinmarketcap #> 8  coinmarketcap #> 9  coinmarketcap #> 10 coinmarketcap #> 11 coinmarketcap"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_shakepay.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Shakepay file — format_shakepay","title":"Format Shakepay file — format_shakepay","text":"Format .csv transaction history file Shakepay later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_shakepay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Shakepay file — format_shakepay","text":"","code":"format_shakepay(data)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_shakepay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Shakepay file — format_shakepay","text":"data dataframe","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_shakepay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Shakepay file — format_shakepay","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_shakepay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Shakepay file — format_shakepay","text":"","code":"formatted.shakepay <- format_shakepay(data_shakepay) formatted.shakepay #>                  date currency    quantity total.price spot.rate transaction #> 1 2021-05-07 14:50:41      BTC  0.00103982   53.033350  51002.43         buy #> 2 2021-05-07 21:25:36      CAD 30.00000000   30.000000      1.00     revenue #> 3 2021-05-08 12:12:57      BTC  0.00011000    5.784024  52582.03     revenue #> 4 2021-05-09 12:22:07      BTC  0.00012000    6.034441  50287.01     revenue #> 5 2021-05-21 12:47:14      BTC  0.00013000    7.348590  56527.62     revenue #> 6 2021-06-11 12:03:31      BTC  0.00014000    8.396927  59978.05     revenue #> 7 2021-06-23 12:21:49      BTC  0.00015000    8.714877  58099.18     revenue #> 8 2021-07-10 00:52:19      BTC  0.00052991   31.268480  59007.15        sell #>     description  comment revenue.type exchange rate.source #> 1 purchase/sale purchase         <NA> shakepay    exchange #> 2         other   credit    referrals shakepay    exchange #> 3   shakingsats   credit     airdrops shakepay    exchange #> 4   shakingsats   credit     airdrops shakepay    exchange #> 5   shakingsats   credit     airdrops shakepay    exchange #> 6   shakingsats   credit     airdrops shakepay    exchange #> 7   shakingsats   credit     airdrops shakepay    exchange #> 8 purchase/sale     sale         <NA> shakepay    exchange"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_suploss.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate superficial capital losses — format_suploss","title":"Calculate superficial capital losses — format_suploss","text":"Calculate superficial capital losses substracted total capital losses.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_suploss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate superficial capital losses — format_suploss","text":"","code":"format_suploss(   data,   transaction = \"transaction\",   quantity = \"quantity\",   cl = NULL )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_suploss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate superficial capital losses — format_suploss","text":"data data transaction Name transaction column quantity Name quantity column cl number cores use.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_suploss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate superficial capital losses — format_suploss","text":"data frame formatted transactions, added columns information superficial losses.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_suploss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate superficial capital losses — format_suploss","text":"","code":"data <- data_adjustedcostbase1 format_suploss(data) #> # A tibble: 4 × 11 #>   date       transaction quantity price  fees total.quantity #>   <date>     <chr>          <dbl> <dbl> <dbl>          <dbl> #> 1 2014-03-03 buy              100    50    10            100 #> 2 2014-05-01 sell              50   120    10             50 #> 3 2014-07-18 buy               50   130    10            100 #> 4 2014-09-25 sell              40    90    10             60 #> # ℹ 5 more variables: suploss.range <Interval>, quantity.60days <dbl>, #> #   share.left60 <dbl>, sup.loss <lgl>, sup.loss.quantity <dbl>"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_uphold.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Uphold file — format_uphold","title":"Format Uphold file — format_uphold","text":"Format .csv transaction history file Uphold later ACB processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_uphold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Uphold file — format_uphold","text":"","code":"format_uphold(data, list.prices = NULL, force = FALSE)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_uphold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Uphold file — format_uphold","text":"data dataframe list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_uphold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Uphold file — format_uphold","text":"data frame exchange transactions, formatted processing.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/format_uphold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Uphold file — format_uphold","text":"","code":"format_uphold(data_uphold) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                   date currency    quantity total.price   spot.rate transaction #> 1  2021-01-07 02:40:31      BAT  1.59081275   0.4861556   0.3056020     revenue #> 2  2021-02-09 14:26:49      BAT 12.69812163   6.6903206   0.5268748     revenue #> 3  2021-03-06 21:32:36      BAT  0.37591275   0.3274509   0.8710821     revenue #> 4  2021-03-07 21:46:57      LTC  0.24129740  55.5243079 230.1073608         buy #> 5  2021-03-07 21:46:57      BAT 52.59871206  55.5243079   1.0556211        sell #> 6  2021-03-07 21:54:09      LTC  0.00300000   0.6903221 230.1073608        sell #> 7  2021-04-05 12:22:00      BAT  8.52198415  12.4145568   1.4567683     revenue #> 8  2021-04-06 03:41:42      LTC  0.00300000   0.7998591 266.6196913        sell #> 9  2021-04-06 04:47:00      LTC  0.03605981   9.6142560 266.6196913         buy #> 10 2021-04-06 04:47:00      BAT  8.52198415   9.6142560   1.1281711        sell #> 11 2021-05-11 07:12:24      BAT  0.47521985   0.7844845   1.6507824     revenue #> 12 2021-06-09 04:52:23      BAT  0.67207415   0.5583566   0.8307961     revenue #>    description         comment revenue.type exchange               rate.source #> 1           in            <NA>     airdrops   uphold             coinmarketcap #> 2           in            <NA>     airdrops   uphold             coinmarketcap #> 3           in            <NA>     airdrops   uphold             coinmarketcap #> 4        trade         BAT-LTC         <NA>   uphold             coinmarketcap #> 5        trade         BAT-LTC         <NA>   uphold coinmarketcap (buy price) #> 6          out withdrawal fees         <NA>   uphold             coinmarketcap #> 7           in            <NA>     airdrops   uphold             coinmarketcap #> 8          out withdrawal fees         <NA>   uphold             coinmarketcap #> 9        trade         BAT-LTC         <NA>   uphold             coinmarketcap #> 10       trade         BAT-LTC         <NA>   uphold coinmarketcap (buy price) #> 11          in            <NA>     airdrops   uphold             coinmarketcap #> 12          in            <NA>     airdrops   uphold             coinmarketcap"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_latest_transactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the date from the latest transactions per exchange — get_latest_transactions","title":"Get the date from the latest transactions per exchange — get_latest_transactions","text":"Get date latest transactions per exchange","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_latest_transactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the date from the latest transactions per exchange — get_latest_transactions","text":"","code":"get_latest_transactions(formatted.ACB)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_latest_transactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the date from the latest transactions per exchange — get_latest_transactions","text":"formatted.ACB formatted.ACB file","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_latest_transactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the date from the latest transactions per exchange — get_latest_transactions","text":"data frame two columns: name exchange well date latest transaction.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_latest_transactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the date from the latest transactions per exchange — get_latest_transactions","text":"","code":"all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) get_latest_transactions(formatted.ACB) #> # A tibble: 1 × 2 #> # Groups:   exchange [1] #>   exchange date                #>   <chr>    <dttm>              #> 1 shakepay 2021-07-10 00:52:19"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_proceeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get proceeds of all sold coins — get_proceeds","title":"Get proceeds of all sold coins — get_proceeds","text":"Get proceeds sold coins, ACB sold coins, resulting difference two, capital gains.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_proceeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get proceeds of all sold coins — get_proceeds","text":"","code":"get_proceeds(formatted.ACB, tax.year, local.timezone = Sys.timezone())"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_proceeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get proceeds of all sold coins — get_proceeds","text":"formatted.ACB formatted.ACB object, tax.year year local.timezone time zone","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_proceeds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get proceeds of all sold coins — get_proceeds","text":"data frame, following columns: type, proceeds, ACB.total, gains.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_proceeds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get proceeds of all sold coins — get_proceeds","text":"","code":"all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) get_proceeds(formatted.ACB, 2021) #>     type proceeds ACB.total    gains #> 1  Gains 31.26848  16.63071 14.63777 #> 2 Losses  0.00000   0.00000  0.00000"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_sup_losses.html","id":null,"dir":"Reference","previous_headings":"","what":"Get superficial loss amounts — get_sup_losses","title":"Get superficial loss amounts — get_sup_losses","text":"Get superficial loss amounts","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_sup_losses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get superficial loss amounts — get_sup_losses","text":"","code":"get_sup_losses(formatted.ACB, tax.year, local.timezone = Sys.timezone())"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_sup_losses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get superficial loss amounts — get_sup_losses","text":"formatted.ACB dataframe formatted.ACB, tax.year year local.timezone time zone","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_sup_losses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get superficial loss amounts — get_sup_losses","text":"data frame, following columns: currency, sup.loss.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/get_sup_losses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get superficial loss amounts — get_sup_losses","text":"","code":"all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) get_sup_losses(formatted.ACB, 2021) #>   currency sup.loss #> 1    Total        0"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/listby_coin.html","id":null,"dir":"Reference","previous_headings":"","what":"List transactions by coin — listby_coin","title":"List transactions by coin — listby_coin","text":"Provides list transactions, separated coin..","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/listby_coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List transactions by coin — listby_coin","text":"","code":"listby_coin(formatted.ACB)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/listby_coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List transactions by coin — listby_coin","text":"formatted.ACB dataframe","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/listby_coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List transactions by coin — listby_coin","text":"list formatted data frames, coin.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/listby_coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List transactions by coin — listby_coin","text":"","code":"all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) listby_coin(formatted.ACB) #> $BTC #>                  date currency   quantity total.price spot.rate transaction #> 1 2021-05-07 14:50:41      BTC 0.00103982    53.03335  51002.43         buy #> 2 2021-05-08 12:12:57      BTC 0.00011000     0.00000  52582.03     revenue #> 3 2021-05-09 12:22:07      BTC 0.00012000     0.00000  50287.01     revenue #> 4 2021-05-21 12:47:14      BTC 0.00013000     0.00000  56527.62     revenue #> 5 2021-06-11 12:03:31      BTC 0.00014000     0.00000  59978.05     revenue #> 6 2021-06-23 12:21:49      BTC 0.00015000     0.00000  58099.18     revenue #> 7 2021-07-10 00:52:19      BTC 0.00052991    31.26848  59007.15        sell #>   fees   description  comment revenue.type     value exchange rate.source #> 1    0 purchase/sale purchase         <NA> 53.033350 shakepay    exchange #> 2    0   shakingsats   credit     airdrops  5.784024 shakepay    exchange #> 3    0   shakingsats   credit     airdrops  6.034441 shakepay    exchange #> 4    0   shakingsats   credit     airdrops  7.348590 shakepay    exchange #> 5    0   shakingsats   credit     airdrops  8.396927 shakepay    exchange #> 6    0   shakingsats   credit     airdrops  8.714877 shakepay    exchange #> 7    0 purchase/sale     sale         <NA> 31.268480 shakepay    exchange #>   currency2 total.quantity                                    suploss.range #> 1       BTC     0.00103982 2021-04-07 14:50:41 UTC--2021-06-06 14:50:41 UTC #> 2       BTC     0.00114982 2021-04-08 12:12:57 UTC--2021-06-07 12:12:57 UTC #> 3       BTC     0.00126982 2021-04-09 12:22:07 UTC--2021-06-08 12:22:07 UTC #> 4       BTC     0.00139982 2021-04-21 12:47:14 UTC--2021-06-20 12:47:14 UTC #> 5       BTC     0.00153982 2021-05-12 12:03:31 UTC--2021-07-11 12:03:31 UTC #> 6       BTC     0.00168982 2021-05-24 12:21:49 UTC--2021-07-23 12:21:49 UTC #> 7       BTC     0.00115991 2021-06-10 00:52:19 UTC--2021-08-09 00:52:19 UTC #>   quantity.60days share.left60 sup.loss.quantity sup.loss gains.uncorrected #> 1      0.00103982   0.00139982                 0    FALSE           0.00000 #> 2      0.00103982   0.00139982                 0    FALSE           0.00000 #> 3      0.00103982   0.00139982                 0    FALSE           0.00000 #> 4      0.00103982   0.00153982                 0    FALSE           0.00000 #> 5      0.00000000   0.00115991                 0    FALSE           0.00000 #> 6      0.00000000   0.00115991                 0    FALSE           0.00000 #> 7      0.00000000   0.00115991                 0    FALSE          14.63777 #>   gains.sup gains.excess    gains      ACB ACB.share #> 1        NA           NA       NA 53.03335  51002.43 #> 2        NA           NA       NA 53.03335  46123.18 #> 3        NA           NA       NA 53.03335  41764.46 #> 4        NA           NA       NA 53.03335  37885.84 #> 5        NA           NA       NA 53.03335  34441.27 #> 6        NA           NA       NA 53.03335  31384.02 #> 7        NA           NA 14.63777 36.40264  31384.02 #>  #> $CAD #>                  date currency quantity total.price spot.rate transaction fees #> 1 2021-05-07 21:25:36      CAD       30           0         1     revenue    0 #>   description comment revenue.type value exchange rate.source currency2 #> 1       other  credit    referrals    30 shakepay    exchange       CAD #>   total.quantity                                    suploss.range #> 1             30 2021-04-07 21:25:36 UTC--2021-06-06 21:25:36 UTC #>   quantity.60days share.left60 sup.loss.quantity sup.loss gains.uncorrected #> 1               0           30                 0    FALSE                 0 #>   gains.sup gains.excess gains ACB ACB.share #> 1        NA           NA    NA   0         0 #>"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/match_prices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Fair Market Value (FMV) of transactions — match_prices","title":"Get Fair Market Value (FMV) of transactions — match_prices","text":"Matches prices obtained prepare_list_prices() function transaction data frame.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/match_prices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Fair Market Value (FMV) of transactions — match_prices","text":"","code":"match_prices(   data,   my.coins = NULL,   start.date = \"2021-01-01\",   list.prices = NULL,   force = FALSE )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/match_prices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Fair Market Value (FMV) of transactions — match_prices","text":"data dataframe .coins coins match start.date date start reporting prices . list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/match_prices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Fair Market Value (FMV) of transactions — match_prices","text":"data frame, following added columns: spot.rate.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/match_prices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Fair Market Value (FMV) of transactions — match_prices","text":"","code":"data <- format_shakepay(data_shakepay)[c(1:2)] match_prices(data) #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. #>                  date currency spot.rate total.price   rate.source #> 1 2021-05-07 14:50:41      BTC  69511.69          NA coinmarketcap #> 2 2021-05-07 21:25:36      CAD      1.00          NA      exchange #> 3 2021-05-08 12:12:57      BTC  69094.36          NA coinmarketcap #> 4 2021-05-09 12:22:07      BTC  70481.47          NA coinmarketcap #> 5 2021-05-21 12:47:14      BTC  46884.98          NA coinmarketcap #> 6 2021-06-11 12:03:31      BTC  44839.18          NA coinmarketcap #> 7 2021-06-23 12:21:49      BTC  39568.30          NA coinmarketcap #> 8 2021-07-10 00:52:19      BTC  41617.47          NA coinmarketcap"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/merge_exchanges.html","id":null,"dir":"Reference","previous_headings":"","what":"List transactions by coin — merge_exchanges","title":"List transactions by coin — merge_exchanges","text":"Provides list transactions, separated coin..","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/merge_exchanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List transactions by coin — merge_exchanges","text":"","code":"merge_exchanges(...)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/merge_exchanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List transactions by coin — merge_exchanges","text":"... pass exchanges merged.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/merge_exchanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List transactions by coin — merge_exchanges","text":"data frame, rows binded arranged, provided data frames.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/merge_exchanges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List transactions by coin — merge_exchanges","text":"","code":"shakepay <- format_shakepay(data_shakepay) newton <- format_newton(data_newton) merge_exchanges(shakepay, newton) #>                   date currency    quantity  total.price  spot.rate transaction #> 1  2021-04-04 22:50:12      LTC  0.10482910   23.4912731   224.0911         buy #> 2  2021-04-04 22:53:46      CAD 25.00000000   25.0000000     1.0000     revenue #> 3  2021-04-04 22:55:55      ETH  2.71987120 3423.8221510  1258.8178         buy #> 4  2021-04-21 19:57:26      BTC  0.00343000  153.1241354 44642.6051         buy #> 5  2021-05-07 14:50:41      BTC  0.00103982   53.0333500 51002.4331         buy #> 6  2021-05-07 21:25:36      CAD 30.00000000   30.0000000     1.0000     revenue #> 7  2021-05-08 12:12:57      BTC  0.00011000    5.7840236 52582.0324     revenue #> 8  2021-05-09 12:22:07      BTC  0.00012000    6.0344409 50287.0079     revenue #> 9  2021-05-12 21:37:42      BTC  0.00000400    0.3049013 76225.3175         buy #> 10 2021-05-12 21:52:40      BTC  0.00321300  156.1241341 48591.3894        sell #> 11 2021-05-21 12:47:14      BTC  0.00013000    7.3485904 56527.6188     revenue #> 12 2021-06-11 12:03:31      BTC  0.00014000    8.3969267 59978.0477     revenue #> 13 2021-06-16 18:49:11      CAD 25.00000000   25.0000000     1.0000     revenue #> 14 2021-06-23 12:21:49      BTC  0.00015000    8.7148765 58099.1770     revenue #> 15 2021-07-10 00:52:19      BTC  0.00052991   31.2684800 59007.1522        sell #>         description  comment revenue.type exchange rate.source #> 1             TRADE     <NA>         <NA>   newton    exchange #> 2  Referral Program     <NA>    referrals   newton    exchange #> 3             TRADE     <NA>         <NA>   newton    exchange #> 4             TRADE     <NA>         <NA>   newton    exchange #> 5     purchase/sale purchase         <NA> shakepay    exchange #> 6             other   credit    referrals shakepay    exchange #> 7       shakingsats   credit     airdrops shakepay    exchange #> 8       shakingsats   credit     airdrops shakepay    exchange #> 9             TRADE     <NA>         <NA>   newton    exchange #> 10            TRADE     <NA>         <NA>   newton    exchange #> 11      shakingsats   credit     airdrops shakepay    exchange #> 12      shakingsats   credit     airdrops shakepay    exchange #> 13 Referral Program     <NA>    referrals   newton    exchange #> 14      shakingsats   credit     airdrops shakepay    exchange #> 15    purchase/sale     sale         <NA> shakepay    exchange"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/prepare_list_prices.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare the list of coins for prices — prepare_list_prices","title":"Prepare the list of coins for prices — prepare_list_prices","text":"Prepare list coins prices.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/prepare_list_prices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare the list of coins for prices — prepare_list_prices","text":"","code":"prepare_list_prices(   coins,   start.date,   end.date = lubridate::now(\"UTC\"),   currency = \"CAD\",   force = FALSE )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/prepare_list_prices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare the list of coins for prices — prepare_list_prices","text":"coins coins include list. start.date date start reporting prices . end.date date end reporting prices . currency currency get value coins . force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/prepare_list_prices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare the list of coins for prices — prepare_list_prices","text":"data frame, following columns: timestamp, id, slug, name, symbol, ref_cur, open, high, low, close, volume, market_cap, time_open, time_close, time_high, time_low, spot.rate2, currency, date2.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/prepare_list_prices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare the list of coins for prices — prepare_list_prices","text":"crypto2::crypto_history API times bit capricious. might need try times process correctly without errors.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/prepare_list_prices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare the list of coins for prices — prepare_list_prices","text":"","code":"my.coins <- c(\"BTC\", \"ETH\") my.list.prices <- prepare_list_prices(coins = my.coins, start.date = \"2023-01-01\") #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. head(my.list.prices) #> # A tibble: 6 × 19 #> # Rowwise:  #>   timestamp              id slug    name    symbol ref_cur   open   high    low #>   <dttm>              <int> <chr>   <chr>   <chr>  <chr>    <dbl>  <dbl>  <dbl> #> 1 2021-01-03 00:00:00     1 bitcoin Bitcoin BTC    CAD     37396. 42207. 37033. #> 2 2021-01-04 00:00:00     1 bitcoin Bitcoin BTC    CAD     40901. 44057. 40803. #> 3 2021-01-05 00:00:00     1 bitcoin Bitcoin BTC    CAD     41744. 42468. 36404. #> 4 2021-01-06 00:00:00     1 bitcoin Bitcoin BTC    CAD     40889. 43642. 38539. #> 5 2021-01-07 00:00:00     1 bitcoin Bitcoin BTC    CAD     43106. 46711. 42460. #> 6 2021-01-08 00:00:00     1 bitcoin Bitcoin BTC    CAD     46668. 51055. 46273. #> # ℹ 10 more variables: close <dbl>, volume <dbl>, market_cap <dbl>, #> #   time_open <dttm>, time_close <dttm>, time_high <dttm>, time_low <dttm>, #> #   spot.rate2 <dbl>, currency <chr>, date2 <date>"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/prepare_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare info for full crypto tax report — prepare_report","title":"Prepare info for full crypto tax report — prepare_report","text":"Prepare required information full crypto tax report.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/prepare_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare info for full crypto tax report — prepare_report","text":"","code":"prepare_report(   formatted.ACB,   tax.year = \"all\",   local.timezone = Sys.timezone(),   list.prices = NULL )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/prepare_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare info for full crypto tax report — prepare_report","text":"formatted.ACB formatted.ACB object. tax.year tax year desired. local.timezone time zone use date report. list.prices list.prices object fetch coin prices.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/prepare_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare info for full crypto tax report — prepare_report","text":"list, containing following objects: report.overview, report.summary, proceeds, sup.losses, table.revenues, tax.box, pie_exchange, pie_revenue.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/prepare_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare info for full crypto tax report — prepare_report","text":"","code":"list.prices <- prepare_list_prices(coins = \"BTC\", start.date = \"2021-01-01\") #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) x <- prepare_report(formatted.ACB, list.prices = list.prices) x$proceeds #>     type proceeds ACB.total gains #> 1  Gains        0         0     0 #> 2 Losses        0         0     0"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/print_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Print full crypto tax report — print_report","title":"Print full crypto tax report — print_report","text":"output full crypto tax report HTML format, can printed saved PDF.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/print_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print full crypto tax report — print_report","text":"","code":"print_report(tax.year, name, report.info)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/print_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print full crypto tax report — print_report","text":"tax.year tax year desired. name Name individual report. report.info report info obtained prepare_report().","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/print_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print full crypto tax report — print_report","text":"HTML page containing crypto tax report.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/print_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print full crypto tax report — print_report","text":"","code":"# \\donttest{ list.prices <- prepare_list_prices(coins = \"BTC\", start.date = \"2021-01-01\") #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) report.info <- prepare_report(formatted.ACB, 2021, list.prices = list.prices) #> gains, losses, and net have been filtered for tax year 2021 #> gains, losses, and net have been filtered for tax year 2021 (time zone = UTC) #> Note: revenues have been filtered for tax year 2021 print_report(2021, \"Mr. Cryptoltruist\", report.info) #>  #>  #> processing file: full_report.Rmd #> 1/21                   #> 2/21 [setup]           #> 3/21                   #> 4/21 [summary]         #> 5/21                   #> 6/21 [values]          #> 7/21                   #> 8/21 [overview]        #> 9/21                   #> 10/21 [current value]   #> 11/21                   #> 12/21 [sup loss]        #> 13/21                   #> 14/21 [revenues]        #> 15/21                   #> 16/21 [pie_exchange]    #> 17/21                   #> 18/21 [pie_revenue]     #> 19/21                   #> 20/21 [unnamed-chunk-1] #> 21/21                   #> output file: full_report.knit.md #> /opt/hostedtoolcache/pandoc/3.1.11/x64/pandoc +RTS -K512m -RTS full_report.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output /home/runner/work/cryptoTax/cryptoTax/docs/reference/full_report.html --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/latex-div.lua --embed-resources --standalone --variable bs3=TRUE --section-divs --template /home/runner/work/_temp/Library/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --variable theme=bootstrap --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /tmp/RtmpypjyIt/rmarkdown-str188776deaa59.html  #>  #> Output created: full_report.html # } # \\dontshow{ unlink(\"full_report.html\") # }"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of ACB — report_overview","title":"Summary of ACB — report_overview","text":"Provides summary Adjusted Cost Base (ACB) per share, well realized unrealized gains/losses (plus net value), per coin.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_overview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of ACB — report_overview","text":"","code":"report_overview(   formatted.ACB,   today.data = TRUE,   tax.year = \"all\",   local.timezone = Sys.timezone(),   list.prices = NULL,   force = FALSE )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_overview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of ACB — report_overview","text":"formatted.ACB formatted ACB data. today.data whether fetch today's data. tax.year tax year(s) include. local.timezone time zone use date report. list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_overview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of ACB — report_overview","text":"summary data frame, containing least following columns: date.last, currency, total.quantity, cost.share, total.cost, gains, losses, net, currency.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_overview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of ACB — report_overview","text":"","code":"all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) report_overview(formatted.ACB, today.data = FALSE) #>             date.last currency total.quantity cost.share total.cost gains #> 1 2021-07-10 00:52:19      BTC     0.00115991   31384.02       36.4 14.64 #> 2 2021-07-10 00:52:19    Total             NA         NA       36.4 14.64 #>   losses   net currency2 #> 1      0 14.64       BTC #> 2      0 14.64     Total"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_revenues.html","id":null,"dir":"Reference","previous_headings":"","what":"Report all revenues — report_revenues","title":"Report all revenues — report_revenues","text":"Provides summary revenues sources.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_revenues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report all revenues — report_revenues","text":"","code":"report_revenues(   formatted.ACB,   tax.year = \"all\",   local.timezone = Sys.timezone() )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_revenues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report all revenues — report_revenues","text":"formatted.ACB formatted ACB data. tax.year tax year(s) include. local.timezone time zone use date report.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_revenues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report all revenues — report_revenues","text":"data frame, following columns: exchange, date.last, total.revenues, airdrops, referrals, staking, promos, interests, rebates, rewards, forks, mining, currency.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_revenues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report all revenues — report_revenues","text":"","code":"all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) report_revenues(formatted.ACB) #>   exchange           date.last total.revenues airdrops referrals staking promos #> 1 shakepay 2021-06-23 12:21:49          66.28    36.28        30       0      0 #> 2    total 2021-06-23 12:21:49          66.28    36.28        30       0      0 #>   interests rebates rewards forks mining currency #> 1         0       0       0     0      0      CAD #> 2         0       0       0     0      0      CAD"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of gains and losses — report_summary","title":"Summary of gains and losses — report_summary","text":"Provides summary realized capital gains losses (total).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of gains and losses — report_summary","text":"","code":"report_summary(   formatted.ACB,   today.data = TRUE,   tax.year = \"all\",   local.timezone = Sys.timezone(),   list.prices = NULL,   force = FALSE )"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of gains and losses — report_summary","text":"formatted.ACB formatted ACB data. today.data whether fetch today's data. tax.year tax year(s) include. local.timezone time zone use date report. list.prices list.prices object fetch coin prices. force Whether force recreating list.prices even though already exists (e.g., added new coins new dates).","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of gains and losses — report_summary","text":"summary data frame, containing least following columns: Type, Amount, currency.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/report_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of gains and losses — report_summary","text":"","code":"all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) report_summary(formatted.ACB, today.data = FALSE) #>         Type Amount currency #> 1   tax.year    all      CAD #> 2      gains  14.64      CAD #> 3     losses   0.00      CAD #> 4        net  14.64      CAD #> 5 total.cost  36.40      CAD"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/tax_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a simple table of relevant tax information — tax_box","title":"Get a simple table of relevant tax information — tax_box","text":"Output simple table relevant tax information tax form line numbers.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/tax_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a simple table of relevant tax information — tax_box","text":"","code":"tax_box(report.summary, sup.losses, table.revenues, proceeds)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/tax_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a simple table of relevant tax information — tax_box","text":"report.summary report.summary sup.losses sup.losses table.revenues table.revenues proceeds proceeds","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/tax_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a simple table of relevant tax information — tax_box","text":"data frame, following columns: Description, Amount, Comment, Line","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/tax_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a simple table of relevant tax information — tax_box","text":"","code":"my.list.prices <- prepare_list_prices(coins = \"BTC\", start.date = \"2021-01-01\") #> Object 'list.prices' already exists. Reusing 'list.prices'. To force a fresh download, use argument 'force = TRUE'. all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) report.summary <- report_summary(formatted.ACB, today.data = TRUE, list.prices = my.list.prices) sup.losses <- get_sup_losses(formatted.ACB, 2021) table.revenues <- report_revenues(formatted.ACB, 2021) #> Note: revenues have been filtered for tax year 2021 proceeds <- get_proceeds(formatted.ACB, 2021) tax_box(report.summary, sup.losses, table.revenues, proceeds) #>          Description    Amount #> 1     Gains proceeds 31.268480 #> 2          Gains ACB 16.630708 #> 3              Gains 14.637772 #> 4       50% of gains  7.318886 #> 5   Outlays of gains  0.000000 #> 6    Losses proceeds  0.000000 #> 7         Losses ACB  0.000000 #> 8             Losses  0.000000 #> 9      50% of losses  0.000000 #> 10 Outlays of losses  0.000000 #> 11    Foreign income  0.000000 #> 12     Foreign gains 14.637772 #>                                                                       Comment #> 1                                              Proceeds of sold coins (gains) #> 2                                                   ACB of sold coins (gains) #> 3                                                      Proceeds - ACB (gains) #> 4                                                               Half of gains #> 5   Expenses and trading fees (gains). Normally already integrated in the ACB #> 6                                             Proceeds of sold coins (losses) #> 7                                                  ACB of sold coins (losses) #> 8                                                     Proceeds - ACB (losses) #> 9                                                              Half of losses #> 10 Expenses and trading fees (losses). Normally already integrated in the ACB #> 11        Income from crypto interest or staking is considered foreign income #> 12              Capital gains from crypto is considered foreign capital gains #>                                             Line #> 1                Schedule 3, line 15199 column 2 #> 2                Schedule 3, line 15199 column 3 #> 3       Schedule 3, lines 15199 column 5 & 15300 #> 4  T1, line 12700; Schedule 3, line 15300, 19900 #> 5                                   Tax software #> 6                Schedule 3, line 15199 column 2 #> 7                Schedule 3, line 15199 column 3 #> 8       Schedule 3, lines 15199 column 5 & 15300 #> 9  T1, line 12700; Schedule 3, line 15300, 19900 #> 10                                  Tax software #> 11                         T1, line 12100, T1135 #> 12                                         T1135"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/tax_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Format tax table for final HTML report — tax_table","title":"Format tax table for final HTML report — tax_table","text":"Format tax tables final rmd/html report.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/tax_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format tax table for final HTML report — tax_table","text":"","code":"tax_table(table, repeat.header = FALSE, type = 1)"},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/tax_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format tax table for final HTML report — tax_table","text":"table table format repeat.header Logical, whether repeat headers bottom. type Type table, one 1 (default), 2, 3.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/tax_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format tax table for final HTML report — tax_table","text":"flextable object, certain formatting features.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/reference/tax_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format tax table for final HTML report — tax_table","text":"currency sup.loss Total 0.00","code":"all.data <- format_shakepay(data_shakepay) formatted.ACB <- format_ACB(all.data, verbose = FALSE) x <- get_sup_losses(formatted.ACB, 2021) tax_table(x) .cl-3e807a42{table-layout:auto;}.cl-3e7aaa9a{font-family:'Times New Roman';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3e7aaaae{font-family:'Times New Roman';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-3e7cc74e{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 2;background-color:transparent;}.cl-3e7cd964{background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0.75pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-3e7cd96e{background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}currencysup.lossTotal0.00"},{"path":"https://cryptoltruist.github.io/cryptoTax/news/index.html","id":"cryptotax-006","dir":"Changelog","previous_headings":"","what":"cryptoTax 0.0.6","title":"cryptoTax 0.0.6","text":"Breaking changes: USD2CAD() now uses different system convert USD rates CAD. USD2CAD() used rely priceR, depends exchangerate.host now requires API key limited free API calls. old priceR function still available, API key, USD2CAD_priceR(). One alternative take USDC CAD rate, since USDC usually pretty closely pegged USD. instance, 2021 2024, average difference USD USDC 0.00003 CAD. Nonetheless, get exact rate, new system compares USD CAD rates USDC calculates adjusted CAD rate based . New Features: New function: format_coinbase() Improvements: Various improvements format_ functions (ACB, CDC_wallet, blockfi, presearch) prepare_report","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/news/index.html","id":"cryptotax-005","dir":"Changelog","previous_headings":"","what":"cryptoTax 0.0.5","title":"cryptoTax 0.0.5","text":"CRAN release: 2023-03-12 Added CRAN requirements","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/news/index.html","id":"cryptotax-004","dir":"Changelog","previous_headings":"","what":"cryptoTax 0.0.4","title":"cryptoTax 0.0.4","text":"CRAN release: 2023-03-08 Added CRAN requirements","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/news/index.html","id":"cryptotax-003","dir":"Changelog","previous_headings":"","what":"cryptoTax 0.0.3","title":"cryptoTax 0.0.3","text":"CRAN release: 2023-03-07 Added CRAN requirements","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/news/index.html","id":"cryptotax-002","dir":"Changelog","previous_headings":"","what":"cryptoTax 0.0.2","title":"cryptoTax 0.0.2","text":"CRAN release: 2023-02-20 Breaking changes: get rid format_wealtsimple(), format_BSC(), format_binance_trades(), crypto2fiat(), fetch_prices() functions, since goal better fulfilled new format_generic(), format_binance(), match_prices(), prepare_list_prices() functions, respectively. New Features: New pkgdown website three vignettes: (1) calculating ACB, (2) full tax report, (3) tax treatments decisions. Informative progress bars format_ACB() format_suploss() since functions extremely slow thousands transactions. Added example data sets (ACB, cryptotaxcalculator, coinpanda, koinly, shakepay, CDC, CDC exchange rewards, CDC exchange trades, CDC wallet, adalite, binance, binance withdrawals, blockfi, celsius, coinsmart, exodus, newton, presearch, pooltool, gemini, uphold) Now detects new transaction types accounted prepare_report() get required information print_report() one go. get_sup_losses last missing piece get info needed prepare_report(). format_detect(), automatically detect right exchange process corresponding function (also supports lists exchanges). format_generic(), process transaction history files supported existing functions. format_binance(), general version works general transaction report includes rewards (withdrawal fees). thus get rid format_binance_trades() since former superior (includes transaction types). get_latest_transactions(): get latest transaction date exchange check_missing_transactions(): show rows negative total balances help identify missing transactions. format_dollars(): format numeric values comma thousands separator. Improvements: format_blockfi() format_CDC_exchange_trades() now correctly match prices purchases sales trades (instead relying corresponding daily spot rates). Consistently use plural reward types. Massive improvements speed using joins price lookups (instead making new API request row) prices coins USD CAD conversions. prices fetched priceR (USD CAD conversions), now indicates source price accordingly (rate.source = \"exchange (USD conversion)\") format_* functions: now reorder columns consistent fashion + tests (ACB()). ACB_suploss(): integrates primary ACB() function, accordingly gains new logical argument, suploss. format_suploss(): integrates ACB() suploss = TRUE, gains greatly improved code base. add_quantities(): switches -loop dplyr code. providing first buy transactions (ACB…) one currency provided time insufficient columns provided calculate ‘total.price’ report_revenues() crypto_pie(): Now support forks mining. format_newton(): updated new format new warning message withdrawal fees detected automatically. new transaction types supported: forks (“admin_wallet_credited”), sales (“crypto_viban_exchange”, “card_top_up”, “crypto_wallet_swap_debited”), supercharger rewards (“supercharger_reward_to_app_credited”) coinmarketcap, 2022-05-28, LUNA gets renamed LUNC, LUNA2 fork gets renamed LUNA. confusing CDC, use terms LUNA LUNC (), LUNA2, new LUNA fork. Therefore, now rename “LUNA” transactions (CDC) “LUNC”, “LUNA2” “LUNA”. Bug Fixes: format_shakepay(): now correctly detects CAD referral rewards format_binance(): now correctly detects interest rewards fixed bug whereas superficial loss quantity = 0 prevent computation ACB. corrected “Total time elapsed:” time unit always minutes ACB(): now correctly accept alternative column names Fixed bug NANO/XNO Fixed various R CMD check errors, warnings, notes.","code":""},{"path":"https://cryptoltruist.github.io/cryptoTax/news/index.html","id":"cryptotax-001","dir":"Changelog","previous_headings":"","what":"cryptoTax 0.0.1","title":"cryptoTax 0.0.1","text":"New package","code":""}]
